'use strict';

/*eslint angular/file-name: 0*/
(function () {
  'use strict';

  angular.module('app', ['ngAnimate', 'ngAria', 'ui.router', 'ngC2', 'ui.utils.masks', 'text-mask', 'ngMaterial', 'modelFactory', 'md.data.table', 'ngMaterialDatePicker', 'pascalprecht.translate', 'angularFileUpload', 'ngMaterial', 'ngAnimate', 'ngMessages', 'ngAria', 'ui.router', 'lfNgMdFileInput', 'nemLogging', 'ui-leaflet', 'ng-sortable']);
})();
'use strict';

(function () {
    'use strict';

    config.$inject = ["Global", "$mdThemingProvider", "$modelFactoryProvider", "$translateProvider", "moment", "$mdAriaProvider", "$windowProvider"];
    angular.module('app').config(config);

    /** @ngInject */
    // eslint-disable-next-line max-params
    function config(Global, $mdThemingProvider, $modelFactoryProvider, $translateProvider, moment, $mdAriaProvider, $windowProvider) {

        $translateProvider.useLoader('languageLoader').useSanitizeValueStrategy('escape');

        //$translateProvider.usePostCompiling(true);

        moment.locale('en-GB');

        //the prefix to be used in all back-end api requests
        var $window = $windowProvider.$get();
        $modelFactoryProvider.defaultOptions.prefix = Global.apiPath;

        // Configuration theme - see: https://material.angularjs.org/latest/Theming/03_configuring_a_theme
        $mdThemingProvider.theme('default').primaryPalette('blue', {
            default: '700'
        }).accentPalette('indigo').warnPalette('deep-orange');

        // Enable browser color
        $mdThemingProvider.enableBrowserColor();

        $mdAriaProvider.disableWarnings();
    }
})();
'use strict';

(function () {

    'use strict';

    AppController.$inject = ["$state", "Global", "$localStorage"];
    angular.module('app').controller('AppController', AppController);

    /** @ngInject */
    /**
     * Controller responsible for functionalities that are used in any system state/page
     */
    function AppController($state, Global, $localStorage) {
        var vm = this;

        // Current year to be shown in the footer
        vm.currentYear = null;
        activate();

        function activate() {
            var date = new Date();
            vm.currentYear = date.getFullYear();
        }

        sessionStorage.clear();
        sessionStorage.setItem("role", "admin");
        if (sessionStorage.getItem("role") === "admin") {
            sessionStorage.setItem("role", "1");
        } else if (sessionStorage.getItem("role") === "senior") {
            sessionStorage.setItem("role", "2");
        } else if (sessionStorage.getItem("role") === "user") {
            sessionStorage.setItem("role", "3");
        } else if (sessionStorage.getItem("role") === "guest") {
            sessionStorage.setItem("role", "4");
        }

        // console.log("appcontroller ", $localStorage);
        sessionStorage.setItem("projId", "31024283");
        sessionStorage.setItem("userId", "1000");
    }
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  /**
   * Transforms external libs in angular services so we can use them with dependence injection
   */

  angular.module('app').constant('lodash', _).constant('moment', moment).constant('leaflet', L);
})();
'use strict';

(function () {
  'use strict';

  angular.module('app').constant('Global', {
    appName: 'HeiMAP',
    imagePath: '/images',
    clientPath: '/webapp/app',
    homeState: 'app.map',
    homeUrl: '/map',
    apiPath: ''
  });
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "$urlRouterProvider", "Global"];
  angular.module('app').config(routes);

  /** @ngInject */
  function routes($stateProvider, $urlRouterProvider, Global) {
    $stateProvider.state('app', {
      templateUrl: Global.clientPath + '/shared/partials/app.html',
      abstract: true,
      resolve: { //ensure langs is ready before render view
        translateReady: ['$translate', '$q', function ($translate, $q) {
          var deferred = $q.defer();

          $translate.use('en-GB').then(function () {
            deferred.resolve();
          });

          return deferred.promise;
        }]
      }
    });

    $urlRouterProvider.when('/app', Global.homeUrl);
    $urlRouterProvider.otherwise(Global.homeUrl);
  }
})();
'use strict';

(function () {
  'use strict';

  run.$inject = ["$rootScope", "$state", "$stateParams", "Global"];
  angular.module('app').run(run);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function run($rootScope, $state, $stateParams, Global) {
    //Sets the rootScope so it can be accessed in the views without the controller prefix
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.global = Global;
  }
})();
'use strict';

/*eslint angular/file-name: 0*/
(function () {
  'use strict';

  serviceFactory.$inject = ["$modelFactory"];
  angular.module('app').factory('serviceFactory', serviceFactory);

  /** @ngInject */
  /**
   * More information:
   * https://github.com/swimlane/angular-model-factory/wiki/API
   */
  function serviceFactory($modelFactory) {
    return function (url, options) {
      var model;
      var defaultOptions = {
        actions: {
          /**
           * Action to do a paginated search
           * Expects that a json object with the properties items and total
           */
          paginate: {
            method: 'GET',
            isArray: false,
            wrap: false,
            afterRequest: function afterRequest(response) {
              if (response['items']) {
                response['items'] = model.List(response['items']);
              }

              return response;
            }
          }
        }
      };

      model = $modelFactory(url, angular.merge(defaultOptions, options));

      return model;
    };
  }
})();
'use strict';

(function () {

  'use strict';

  CRUDController.$inject = ["vm", "modelService", "options", "C2Toast", "C2Pagination", "C2Dialog", "$translate"];
  angular.module('app').controller('CRUDController', CRUDController);

  /** @ngInject */
  /**
   * Base Controller that  implements al the standard CRUD functions
   *
   * Implemented actions:
   * activate()
   * search(page)
   * edit(resource)
   * save()
   * remove(resource)
   * goTo(viewName)
   * cleanForm()
   *
   * Triggers:
   *
   * onActivate()
   * applyFilters(defaultQueryFilters)
   * beforeSearch(page) //returning false cancel the submission/flow
   * afterSearch(response)
   * beforeClean //returning false cancel the submission/flow
   * afterClean()
   * beforeSave() //returning false cancel the submission/flow
   * afterSave(resource)
   * onSaveError(error)
   * beforeRemove(resource) //returning false cancel the submission/flow
   * afterRemove(resource)
   *
   * @param {any} vm child controller instance
   * @param {any} modelService model service that the controller will use for the restful requests
   * @param {any} options options to overwrite the default behaviors
   */
  // eslint-disable-next-line max-params
  function CRUDController(vm, modelService, options, C2Toast, C2Pagination, // NOSONAR
  C2Dialog, $translate) {

    //Functions Block
    vm.search = search;
    vm.paginateSearch = paginateSearch;
    vm.normalSearch = normalSearch;
    vm.edit = edit;
    vm.save = save;
    vm.remove = remove;
    vm.goTo = goTo;
    vm.cleanForm = cleanForm;

    activate();

    /**
     * Prepare the controller
     * Do an options merge
     * Initialize the resource
     * Initialize the paging object and do the initial search (if searchOnInit is true )
     */
    function activate() {
      vm.defaultOptions = {
        redirectAfterSave: true,
        searchOnInit: true,
        perPage: 8,
        skipPagination: false
      };

      angular.merge(vm.defaultOptions, options);

      vm.viewForm = false;
      vm.resource = new modelService();

      if (angular.isFunction(vm.onActivate)) vm.onActivate();

      var labelOptions = {
        labels: {
          total: $translate.instant('views.pagination.total'),
          items: $translate.instant('views.pagination.items')
        }
      };

      vm.paginator = C2Pagination.getInstance(vm.search, vm.defaultOptions.perPage, labelOptions);

      if (vm.defaultOptions.searchOnInit) vm.search();
    }

    /**
     * Do a search
     * Checks which of the search functions must be used
     *
     * @param {any} page page that must be requested
     */
    function search(page) {
      vm.defaultOptions.skipPagination ? normalSearch() : paginateSearch(page);
    }

    /**
     * Do a paged search with the applied filters
     *
     * @param {any} page page that must be requested
     */
    function paginateSearch(page) {
      vm.paginator.currentPage = angular.isDefined(page) ? page : 1;
      vm.defaultQueryFilters = {
        page: vm.paginator.currentPage,
        perPage: vm.paginator.perPage
      };

      if (angular.isFunction(vm.applyFilters)) {
        vm.defaultQueryFilters = vm.applyFilters(vm.defaultQueryFilters);
      }
      if (angular.isFunction(vm.beforeSearch) && vm.beforeSearch(page) === false) return false;

      modelService.paginate(vm.defaultQueryFilters).then(function (response) {
        vm.paginator.calcNumberOfPages(response.total);
        vm.resources = response.items;

        if (angular.isFunction(vm.afterSearch)) vm.afterSearch(response);
      });
    }

    /**
     * Do a search with the applied filters
     *
     */
    function normalSearch() {
      vm.defaultQueryFilters = {};

      if (angular.isFunction(vm.applyFilters)) vm.defaultQueryFilters = vm.applyFilters(vm.defaultQueryFilters);
      if (angular.isFunction(vm.beforeSearch) && vm.beforeSearch() === false) return false;

      modelService.query(vm.defaultQueryFilters).then(function (response) {
        vm.resources = response;

        if (angular.isFunction(vm.afterSearch)) vm.afterSearch(response);
      });
    }

    /**
     * Clear the form
     */
    function cleanForm(form) {
      if (angular.isFunction(vm.beforeClean) && vm.beforeClean() === false) return false;

      vm.resource = new modelService();

      if (angular.isDefined(form)) {
        form.$setPristine();
        form.$setUntouched();
      }

      if (angular.isFunction(vm.afterClean)) vm.afterClean();
    }

    /**
     * Load the selected resource in the form
     *
     * @param {any} resource selected resource
     */
    function edit(resource) {
      vm.goTo('form');
      vm.resource = new angular.copy(resource);

      if (angular.isFunction(vm.afterEdit)) vm.afterEdit();
    }

    /**
     * Save or update the resource
     * In the default behavior, redirect the user to the list view after saving
     *
     * @returns
     */
    function save(form) {
      if (angular.isFunction(vm.beforeSave) && vm.beforeSave() === false) return false;

      // console.log(vm.resource)

      vm.resource.$save().then(function (resource) {
        //vm.resource = resource;

        if (angular.isFunction(vm.afterSave)) vm.afterSave(resource);

        if (vm.defaultOptions.redirectAfterSave) {
          vm.cleanForm(form);
          vm.search(vm.paginator.currentPage);
          vm.goTo('list');
        }

        C2Toast.success($translate.instant('messages.saveSuccess'));
      }, function (responseData) {
        if (angular.isFunction(vm.onSaveError)) vm.onSaveError(responseData);
      });
    }

    // /**
    //  * Save vector GeoJSON data
    //  * 
    //  * @returns
    //  */
    // function savegeojson(data){
    //   data = "{adssd}"
    //   vm.resource.geosjondata = data
    //   console.log(vm.resource)
    //   // vm.resource.$save().then(function (resource) {
    //   //   // vm.resource = resource;

    //   //   // console.log("resource")

    //   // }, function (responseData) {
    //   //   // console.log("responseData");
    //   // });
    // }

    /**
     * Retrieve vector GeoJSON data
     * 
     * @returns
     */
    function retrievegeojson(params) {
      console.log(params);
    }

    /**
     * Remove the resource, but before show a dialog to confirm     
     *
     * @param {any} resource resource selected
     */
    function remove(resource) {
      var config = {
        title: $translate.instant('dialog.confirmTitle'),
        description: $translate.instant('dialog.confirmDescription'),
        yes: $translate.instant('global.yes'),
        no: $translate.instant('global.no')
      };

      C2Dialog.confirm(config).then(function () {
        if (angular.isFunction(vm.beforeRemove) && vm.beforeRemove(resource) === false) return false;

        resource.$destroy().then(function () {
          if (angular.isFunction(vm.afterRemove)) vm.afterRemove(resource);

          vm.search();
          C2Toast.info($translate.instant('messages.removeSuccess'));
        });
      });
    }

    /**
     * Switch between the list and form mode
     *
     * @param {any} viewName view name to witch to
     */
    function goTo(viewName) {
      vm.viewForm = false;

      if (viewName === 'form') {
        vm.cleanForm();
        vm.viewForm = true;
      }
    }
  }
})();
'use strict';

(function () {

  'use strict';

  GeoreferenceController.$inject = ["$controller", "$scope", "MapMarkerService", "leafletMarkerEvents", "$rootScope", "MapViewerService", "$translate", "C2Dialog", "$mdColors", "$mdSidenav", "Global", "$timeout", "lodash"];
  angular.module('app').controller('GeoreferenceController', GeoreferenceController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function GeoreferenceController($controller, $scope, MapMarkerService, leafletMarkerEvents, $rootScope, MapViewerService, $translate, C2Dialog, $mdColors, $mdSidenav, Global, $timeout, lodash) {
    var vm = this;

    // Functions Block     
    vm.onViewerActivate = onViewerActivate;
    vm.toggleCreateMarker = toggleCreateMarker;
    vm.beforeViewerActivate = beforeViewerActivate;
    vm.toggleRemoveMarker = toggleRemoveMarker;
    vm.openSaveGeoRef = openSaveGeoRef;
    vm.validGCP = validGCP;
    vm.numOfGCP = numOfGCP;
    vm.redrawMarkers = redrawMarkers;

    // Set the map viewer options
    var options = {
      supportListingView: false,
      supportDrawing: false,
      titleTranslKey: 'views.titles.mapGeoreferencing',
      showGeoRefTools: true,
      leftSideBar: Global.clientPath + '/georeference/navs/geo-left-sidenav.html',
      showGcpTable: true,
      gcpTable: Global.clientPath + '/georeference/navs/gcp-Table.html'
    };

    // initialize empty markers object
    vm.rightMarkers = {};
    vm.leftMarkers = {};

    // instantiate the base MapViewerController
    $controller('MapViewerController', { vm: vm, $scope: $scope, options: options });

    // Listen to the rightMapViewer dragend
    $rootScope.$on('leafletDirectiveMarker.rightMapViewer.dragend', function (event, args) {
      if (vm.rightCreateMarkerEnable === true) {
        // doing nothing for a while
      }
    });

    // Listen to the rightMapViewer click and remove the marker if the removal tool is enabled
    $rootScope.$on('leafletDirectiveMarker.rightMapViewer.click', function (event, args) {
      if (vm.rightRemoveMarkerEnable === true) {
        var id = args.model.id;
        removeMarker(id);
        // call an event to delete it from GCP Table
        $rootScope.$broadcast("deleteGcpFromTableEvent", id);
      } else {
        // ensure the event is fired from GCP Table delete button
        if (args.model.eventFrom === "gcpTable") {
          var id = args.model.id;
          // console.log(id)
          removeMarker(id);
        }
      }
    });

    // Listen to the leftMapViewer click and remove the marker if the removal tool is enabled
    $rootScope.$on('leafletDirectiveMarker.leftMapViewer.click', function (event, args) {
      if (vm.leftRemoveMarkerEnable === true) {
        var id = args.model.id;
        // console.log(id)
        removeMarker(id);
        // call an event to delete it from GCP Table
        $rootScope.$broadcast("deleteGcpFromTableEvent", id);
      } else {
        // ensure the event is fired from GCP Table delete button
        if (args.model.eventFrom === "gcpTable") {
          var id = args.model.id;
          // console.log(id)
          removeMarker(id);
        }
      }
    });

    // Listen to the rightMapViewer click and add a marker on the clicked position
    // if the marker creation tool is enabled
    $rootScope.$on("leafletDirectiveMap.rightMapViewer.click", function (event, args) {
      if (vm.rightCreateMarkerEnable === true) {
        addMarker(args.leafletEvent, 'rightMarkers');
        // ensure both the maps have equal number of markers
        if (lodash.size(vm['leftMarkers']) === _.size(vm['rightMarkers'])) {
          // fire event to GCP controller for caqll refreshGCPTable
          $rootScope.$broadcast("refreshGcpTableEvent");
        }
      }
    });

    // Listen to the leftMapViewer click and add a marker on the clicked position
    // if the marker creation tool is enabled
    $rootScope.$on("leafletDirectiveMap.leftMapViewer.click", function (event, args) {
      if (vm.leftCreateMarkerEnable === true) {
        addMarker(args.leafletEvent, 'leftMarkers');
        // ensure both the maps have equal number of markers
        if (_.size(vm['leftMarkers']) === _.size(vm['rightMarkers'])) {
          // console.log("marker siye equal on both maps");
          // fire event to GCP controller for caqll refreshGCPTable
          $rootScope.$broadcast("refreshGcpTableEvent");
        }
      }
    });

    // Listen to the rightMapViewer click and add a marker on the clicked position
    // if the marker creation tool is enabled
    $rootScope.$on("createMarkerForTable", function (event, args) {
      // console.log(">>> georeference.controller >>> createMarkerForTable ", args);
      if (args.markersKeeper === "leftMarkers") {
        addMarker(args, 'leftMarkers');
      }
      if (args.markersKeeper === "rightMarkers") {
        addMarker(args, 'rightMarkers');
      }
    });

    // Listen to the disable marker creation 
    $rootScope.$on("toggleMarkerCreation", function (event, args) {
      // console.log(">>> georeference.controller >>> toggleMarkerCreation ", args);
      var markersKeeper = args.markersKeeper; // 'leftMapViewer'
      toggleCreateMarker(markersKeeper);
    });

    // Listen to create markers on map based on GCP positions
    $rootScope.$on("createGcpOnMap", function (event, args) {
      // console.log(">>> georeference.controller >>> createGcpOnMap ", args);

      lodash.forEach(args, function (position) {
        var preparedMarkerData = prepareDataForAddMarker(position);
        addMarker(preparedMarkerData.imagePosition, 'leftMarkers');

        // delay is added otherwise only one of the map has markers on it
        setTimeout(function () {
          addMarker(preparedMarkerData.mapPosition, 'rightMarkers');
        }, 10);
      });
    });

    /**
     * Add a marker on a given markers keeper object
     * 
     * @param {any} leafEvent 
     * @param {any} markersKeeper 
     */
    function addMarker(leafEvent, markersKeeper) {
      var markerData = {
        lat: leafEvent.latlng.lat,
        lng: leafEvent.latlng.lng,
        focus: true
      };

      var newMarker = MapMarkerService.buildMarker(vm[markersKeeper], markerData);
      vm[markersKeeper][newMarker.id] = newMarker;
    }

    /**
     * Remove a given marker id from bot viewers
     * 
     * @param {any} markerId 
     */
    function removeMarker(markerId) {
      if (angular.isDefined(vm.leftMarkers[markerId])) {
        // var tempMarkerId = vm.leftMarkers[markerId].icon.className.split(" ")[1];
        delete vm.leftMarkers[markerId];
        // redrawMarkers(vm.leftMarkers, tempMarkerId);
      }
      if (angular.isDefined(vm.rightMarkers[markerId])) {
        var tempMarkerId = vm.rightMarkers[markerId].icon.className.split(" ")[1];
        // added a timeout other wise, after deleting marker on leftside map and then creating a 
        // marker on rightside was not in-sync
        // setTimeout(() => {
        delete vm.rightMarkers[markerId];
        //   redrawMarkers(vm.rightMarkers, tempMarkerId);    
        // }, 10);
      }
    }

    /**
     * Redraw/updates a given map (markerskeeper - object) all the markers 
     * except the deleted one
     * 
     * @param {any} markersKeeper 
     * @param {any} deletedMarkerId 
     */
    function redrawMarkers(markersKeeper, deletedMarkerId) {

      // console.log(">>>georeferenceControlller >>> redrawMarkers ", markersKeeper, deletedMarkerId[1]);
      _.forOwn(markersKeeper, function (marker, key) {
        var tempIdNum = marker.icon.className.split(" ")[1][1];
        if (tempIdNum > deletedMarkerId[1]) {
          var newMarkerNo = tempIdNum - 1;
          // ui changes of marker icon
          marker.icon.html = "<div class=\"mk-icon-container mk-ok\">" + newMarkerNo + "</div>";
          marker.icon.className = "mk-div-icon m" + newMarkerNo;

          // change the old key of the marker with new one, otherwise the newly created marker's numbering 
          // will not be in sync
          var oldKey = key;
          var newKey = "m" + newMarkerNo;
          if (oldKey !== newKey) {
            Object.defineProperty(markersKeeper, newKey, Object.getOwnPropertyDescriptor(markersKeeper, oldKey));
            delete markersKeeper[oldKey];
          }
          // console.log("marker = ", marker);
        }
      });
    }

    /**
     * Actions executed before the base viewer is activated
     * 
     */
    function beforeViewerActivate() {

      // activate the event listening for right viewer and right marker events
      vm.rightViewerEvents = {
        markers: {
          enable: leafletMarkerEvents.getAvailableEvents()
        },
        map: {
          enable: ['dragend', 'drag', 'click', 'mousemove']
          //logic: 'emit'
        }
      };
      // activate the event listening for left viewer and left marker events
      vm.leftViewerEvents = {
        markers: {
          enable: leafletMarkerEvents.getAvailableEvents()
        },
        map: {
          enable: ['dragend', 'drag', 'click', 'mousemove']
          //logic: 'emit'
        }
      };
    }

    /**
     * Actions executed after the base viewer is activated
     * 
     */
    function onViewerActivate() {
      // Set global viewer options
      // changed for resolving #184 
      // MapViewerService.setOption('rightMapViewer', 'showLoadMapInRight', false);
      MapViewerService.setOption('rightMapViewer', 'showLoadMapInRight', true);
      MapViewerService.setOption('leftMapViewer', 'showLoadMapInRight', true);
    }

    /**
     * Enable/disable the marker creation
     * 
     * @param {any} viewerId 
     */
    function toggleCreateMarker(viewerId) {
      if (viewerId === 'rightMapViewer') {
        vm.rightCreateMarkerEnable = !vm.rightCreateMarkerEnable;

        // it is not possible to have removal and create tool enabled at the same time
        // so, if the removal and create tool are enabled, the right removal tool is disabled
        if (vm.rightCreateMarkerEnable === true && vm.rightRemoveMarkerEnable === true) {
          vm.rightRemoveMarkerEnable = false;
        }
      } else {
        vm.leftCreateMarkerEnable = !vm.leftCreateMarkerEnable;

        // it is not possible to have removal and create tool enabled at the same time
        // so, if the removal and create tool are enabled, the left removal tool is disabled
        if (vm.leftCreateMarkerEnable === true && vm.leftRemoveMarkerEnable === true) {
          vm.leftRemoveMarkerEnable = false;
        }
      }
    }

    /**
     * Enable/disable the marker removal
     * 
     * @param {any} viewerId
     */
    function toggleRemoveMarker(viewerId) {
      if (viewerId === 'rightMapViewer') {
        vm.rightRemoveMarkerEnable = !vm.rightRemoveMarkerEnable;

        // it is not possible to have removal and create tool enabled at the same time
        // so, if the removal and create tool are enabled, the right create tool is disabled
        if (vm.rightRemoveMarkerEnable === true && vm.rightCreateMarkerEnable === true) {
          vm.rightCreateMarkerEnable = false;
        }
      } else {
        vm.leftRemoveMarkerEnable = !vm.leftRemoveMarkerEnable;

        // it is not possible to have removal and create tool enabled at the same time
        // so, if the removal and create tool are enabled, the left create tool is disabled
        if (vm.leftRemoveMarkerEnable === true && vm.leftCreateMarkerEnable === true) {
          vm.leftCreateMarkerEnable = false;
        }
      }
    }

    /**
     * Opens the side nav with save options for the georeference
     * This function just open the side nav. The georeference save function is defined 
     * in the side nav controller @see app/georeference/navs.geo.left.sidenav.controller.js
     */
    function openSaveGeoRef() {
      // if the Ground Control Points are valid, we just open the side nav
      if (validGCP()) {
        $scope.vm = vm;
        $mdSidenav('left').toggle();
        $rootScope.$emit('saveGeoRef', vm.leftMarkers);
      } else {
        // if not, we warn the user about it
        var config = {
          title: $translate.instant('dialog.invalidGeorefTitle'),
          description: $translate.instant('dialog.invalidGeorefText'),
          toolbarBgColor: $mdColors.getThemeColor('primary'),
          okBgColor: $mdColors.getThemeColor('primary'),
          ok: $translate.instant('global.ok')
        };
        C2Dialog.alert(config);
      }
    }

    /**
     * 
     */
    function numOfGCP() {
      return Object.keys(vm.leftMarkers).length;
    }

    /**
     * Validate the Ground Control Points about to be used for the georeference
     * 
     * @returns 
     */
    function validGCP() {
      // get the properties count of both viewers
      var leftCount = Object.keys(vm.leftMarkers).length;
      var rightCount = Object.keys(vm.rightMarkers).length;

      // to be valid a minimum of 3 GCP must be selected 
      // and both viewers must have the same amount of GCP defined
      return leftCount >= 3 && leftCount === rightCount;
    }

    /**
     * Convert GCP data received from /map response to marker format data
     * 
     * @param position gcp response of /map request
     * @returns Object In format how addMarker function needs marker data
     */
    function prepareDataForAddMarker(position) {
      var imagePositionInLatLng = L.Projection.SphericalMercator.unproject(
      // L.latLng(position.pixelY,parseFloat(position.pixelX))
      L.point(parseFloat(position.pixelX), position.pixelY));
      // console.log(imagePositionInLatLng);

      return {
        "imagePosition": {
          "latlng": {
            "lat": imagePositionInLatLng.lat,
            "lng": imagePositionInLatLng.lng
          }
        },
        "mapPosition": {
          "latlng": {
            "lat": position.lat,
            "lng": position.lon
          }
        }
      };
    }
  }
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "Global"];
  angular.module('app').config(routes);

  /**
   * Configuration file for georeference route
   *
   * @param {object} $stateProvider
   * @param {object} Global
   */
  /** @ngInject */
  function routes($stateProvider, Global) {
    $stateProvider.state('app.georeference', {
      url: '/georeference',
      templateUrl: Global.clientPath + '/georeference/georeference.html',
      controller: 'GeoreferenceController as mapCtrl',
      data: {}
    });
  }
})();
'use strict';

(function () {
  'use strict';

  GeoreferenceService.$inject = ["serviceFactory", "$http", "$q"];
  angular.module('app').factory('GeoreferenceService', GeoreferenceService);

  /** @ngInject */
  function GeoreferenceService(serviceFactory, $http, $q) {
    var applyEndPoint = "/heimap/georef/apply";
    var previewGcpEndPoint = "/heimap/georef/rmse";

    var model = serviceFactory(applyEndPoint, {
      actions: {},
      instance: {
        saveGeoRef: saveGeoRef,
        previewGCP: previewGCP
      }
    });

    function previewGCP(paramData) {
      // console.log(">>> GeoreferenceService >>> previewGCP ", previewGcpEndPoint, paramData);
      var deferred = $q.defer();
      var formData = new FormData();
      /* 
      paramData = {
          "imageCoordinates":{
            "m1":{
              "id":"m1",
              "lat":0.0067377090298955476,
              "lng":0.00429989455581481,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m1",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">1</div>"
              }
            },
            "m2":{
              "id":"m2",
              "lat":0.0003862380981423107,
              "lng":0.0029246218792744476,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m2",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">2</div>"
              }
            },
            "m3":{
              "id":"m3",
              "lat":0.0007295608520352782,
              "lng":0.012852371513050189,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m3",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">3</div>"
              }
            },
            "m4":{
              "id":"m4",
              "lat":0.006051063526346111,
              "lng":0.01096137158280719,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m4",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">4</div>"
              }
            }
          },
          "worldCoordinates":{
            "m1":{
              "id":"m1",
              "lat":49.360911547126165,
              "lng":8.03715297154017,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m1",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">1</div>"
              }
            },
            "m2":{
              "id":"m2",
              "lat":48.832181625698475,
              "lng":7.998645336597,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m2",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">2</div>"
              }
            },
            "m3":{
              "id":"m3",
              "lat":48.85387273165656,
              "lng":9.049353661475235,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m3",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">3</div>"
              }
            },
            "m4":{
              "id":"m4",
              "lat":49.47883244071047,
              "lng":9.203384201247957,
              "focus":true,
              "draggable":true,
              "icon":{
                "type":"div",
                "className":"mk-div-icon m4",
                "iconSize":null,
                "html":"<div class=\"mk-icon-container mk-ok\">4</div>"
              }
            }
          },
          "rectifyMethod":"1stOrderPolyn",
          "resamplingMethod":"near",
          "mapId":"23",
          "newFileName":"1_g_1stOrderPolyn_near_7.19.2018",
          "bboxCropImage":"7.998645336597 48.832181625698475 9.203384201247957 49.47883244071047"
        }
       */
      $http.post(previewGcpEndPoint, paramData).then(function (result) {
        deferred.resolve(result.data);
      }, function (err) {
        deferred.reject(err);
      });
      return deferred.promise;
    }

    // not used
    function saveGeoRef() {
      console.log(">>> GeoreferenceService >>> saveGeoRef ", this.applyEndPoint);

      var deferred = $q.defer();
      var formData = new FormData();

      $http.post(this.applyEndPoint, formData, {
        transformRequest: angular.identity,
        headers: {
          'Content-Type': undefined
        }
      }).then(function (result) {
        deferred.resolve(result.data);
      }, function (err) {
        deferred.reject(err);
      });
      return deferred.promise;
    }

    return model;
  }
})();
'use strict';

(function () {

  'use strict';

  ExportController.$inject = ["$controller", "ExportService"];
  angular.module('app').controller('ExportController', ExportController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function ExportController($controller, ExportService) {
    var vm = this;

    //Attributes Block

    //Functions Block

    // instantiate base controller
    $controller('CRUDController', { vm: vm, modelService: ExportService, options: { searchOnInit: false } });
  }
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "Global"];
  angular.module('app').config(routes);

  /**
   * Arquivo de configuração com as rotas específicas do recurso export
   *
   * @param {object} $stateProvider
   * @param {object} Global
   */
  /** @ngInject */
  function routes($stateProvider, Global) {
    $stateProvider.state('app.export', {
      url: '/export',
      templateUrl: Global.clientPath + '/export/export.html',
      controller: 'ExportController as exportCtrl',
      data: {}
    });
  }
})();
'use strict';

(function () {
  'use strict';

  ExportService.$inject = ["serviceFactory"];
  angular.module('app').factory('ExportService', ExportService);

  /** @ngInject */
  function ExportService(serviceFactory) {
    var model = serviceFactory('export', {
      actions: {},
      instance: {}
    });

    return model;
  }
})();
'use strict';

(function () {

  'use strict';

  isOrNotGeoreferenced.$inject = ["$filter"];
  angular.module('app').filter('isOrNotGeoreferenced', isOrNotGeoreferenced);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function isOrNotGeoreferenced($filter) {
    /**
     * Filter to convert boolean to yes or not string
     *
     * @param {any} input property/variable
     * @returns the translated yes/no string
     */
    return function (input) {
      var isTrue = input === true || input === 'true' || input === 1 || angular.isDefined(input) && input !== false;
      var key = 'attributes.' + (isTrue ? 'isGeoreferenced' : 'isNotGeoreferenced');
      var translated = $filter('translate')(key);
      return translated;
    };
  }
})();
'use strict';

(function () {

  'use strict';

  LanguageLoader.$inject = ["$q", "$log", "$injector"];
  angular.module('app').factory('languageLoader', LanguageLoader);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function LanguageLoader($q, $log, $injector) {
    var service = this;

    service.translate = function (locale) {
      return {
        global: $injector.get(locale + '.i18n.global'),
        views: $injector.get(locale + '.i18n.views'),
        attributes: $injector.get(locale + '.i18n.attributes'),
        dialog: $injector.get(locale + '.i18n.dialog'),
        messages: $injector.get(locale + '.i18n.messages'),
        models: $injector.get(locale + '.i18n.models')
      };
    };

    // return loaderFn
    return function (options) {
      $log.info('Loading the language content ' + options.key);
      var translation = service.translate(options.key);
      return $q.when(translation);
    };
  }
})();
'use strict';

(function () {

  'use strict';

  tAttr.$inject = ["$filter"];
  angular.module('app').filter('tAttr', tAttr);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function tAttr($filter) {
    /**
     * Filtro para tradução de um atributo de um model
     * 
     * @param {any} name nome do atributo
     * @returns o nome do atributo traduzido caso encontre se não o nome passado por parametro
     */
    return function (name) {
      var key = 'attributes.' + name;
      var translate = $filter('translate')(key);

      return translate === key ? name : translate;
    };
  }
})();
'use strict';

(function () {

  'use strict';

  tBreadcrumb.$inject = ["$filter"];
  angular.module('app').filter('tBreadcrumb', tBreadcrumb);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function tBreadcrumb($filter) {
    /**
     * Filtro para tradução do breadcrumb (titulo da tela com rastreio)
     *
     * @param {any} id chave com o nome do state referente tela
     * @returns a tradução caso encontre se não o id passado por parametro
     */
    return function (id) {
      //pega a segunda parte do nome do state, retirando a parte abstrata (app.)
      var key = 'views.breadcrumbs.' + id.split('.')[1];
      var translate = $filter('translate')(key);

      return translate === key ? id : translate;
    };
  }
})();
'use strict';

(function () {

  'use strict';

  tModel.$inject = ["$filter"];
  angular.module('app').filter('tModel', tModel);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function tModel($filter) {
    /**
     * Filtro para tradução de um atributo de um model
     *
     * @param {any} name nome do atributo
     * @returns o nome do atributo traduzido caso encontre se não o nome passado por parametro
     */
    return function (name) {
      var key = 'models.' + name.toLowerCase();
      var translate = $filter('translate')(key);

      return translate === key ? name : translate;
    };
  }
})();
'use strict';

(function () {

  'use strict';

  yesOrNo.$inject = ["$filter"];
  angular.module('app').filter('yesOrNo', yesOrNo);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function yesOrNo($filter) {
    /**
     * Filter to convert boolean to yes or not string
     *
     * @param {any} input property/variable
     * @returns the translated yes/no string
     */
    return function (input) {
      var isTrue = input === true || input === 'true' || input === 1 || angular.isDefined(input) && input !== false;
      var key = 'global.' + (isTrue ? 'yes' : 'no');
      var translated = $filter('translate')(key);
      return translated;
    };
  }
})();
'use strict';

(function () {
  'use strict';

  spinnerInterceptor.$inject = ["$httpProvider", "$provide"];
  angular.module('app').config(spinnerInterceptor);

  function spinnerInterceptor($httpProvider, $provide) {
    /**
     * This interceptor is responsible for showing and hiding the C2Spinner
     * when a async request is started/ended
     *
     * @param {any} $q
     * @param {any} $injector
     * @returns
     */
    showHideSpinner.$inject = ["$q", "$injector", "Global"];
    function showHideSpinner($q, $injector, Global) {

      /**
       * Current pending requests
       */
      Global.pendingRequests = 0;

      return {
        request: function request(config) {
          Global.pendingRequests++;
          $injector.get('C2Spinner').show();
          return config;
        },

        response: function response(_response) {
          Global.pendingRequests--;
          // the spinner is only hidden if there are no more  pending requests      
          if (Global.pendingRequests === 0) {
            $injector.get('C2Spinner').hide();
          }
          return _response;
        },

        responseError: function responseError(rejection) {
          Global.pendingRequests--;
          // the spinner is only hidden if there are nomore  pending requests      
          if (Global.pendingRequests === 0) {
            $injector.get('C2Spinner').hide();
          }
          return $q.reject(rejection);
        }
      };
    }

    // Define a factory to the $httpInterceptor
    $provide.factory('showHideSpinner', showHideSpinner);

    // Push the new factory onto the $http interceptor array
    $httpProvider.interceptors.push('showHideSpinner');
  }
})();
'use strict';

(function () {
  'use strict';

  FeatureService.$inject = ["serviceFactory"];
  angular.module('app').factory('FeatureService', FeatureService);

  /** @ngInject */
  function FeatureService(serviceFactory) {
    var model = serviceFactory('/heimap/feature/', {
      actions: {},
      instance: {}
    });

    return model;
  }
})();
'use strict';

(function () {

  'use strict';

  MapController.$inject = ["$controller", "C2Dialog", "$scope", "Global", "MapViewerService", "$rootScope"];
  angular.module('app').controller('MapController', MapController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function MapController($controller, C2Dialog, $scope, Global, MapViewerService, $rootScope) {
    var vm = this;

    // Functions Block
    vm.openAddMap = openAddMap;
    vm.openEditMap = openEditMap;
    vm.onViewerActivate = onViewerActivate;

    // Set the map viewer options
    var options = {
      supportListingView: true,
      supportDrawing: false,
      titleTranslKey: 'views.titles.mapView',
      leftSideBar: Global.clientPath + '/map/navs/map-left-sidenav.html'

      // instantiate the base MapViewerController
    };$controller('MapViewerController', { vm: vm, $scope: $scope, options: options });

    /**
     * Actions executed after the base viewer is activated
     * 
     */
    function onViewerActivate() {
      // Set global viewer options
      MapViewerService.setOption('rightMapViewer', 'showLoadMapInRight', true);
      MapViewerService.setOption('leftMapViewer', 'showLoadMapInRight', true);
    }

    /**
     * Listen to the added map draw  event and save the map
     * in the back-end
     */
    $rootScope.$on('addedMapDraw', function (event, drawsGeoJson) {
      console.log(">>>map.controller >>> addedMapDraw ", drawsGeoJson);
      vm.resource.draws = drawsGeoJson;
      openAttributeDailog(drawsGeoJson);
      // it is needed to define a way to identify the target map over which the polygon was drawn, so it can be saved as a vector data to that map
      //vm.resource.$save();
    });

    /**
     * Open the dialog to add a map
     * @return void
     */
    function openAddMap() {
      openDialog();
    }

    /**
     * Open the dialog to edit a map
     * 
     * @param {any} resource 
     *  @return void
     */
    function openEditMap(resource) {
      openDialog(resource);
    }

    /**
     * Open the dialog that allows add or edit a map
     * When closed, the resources (maps) will be refreshed
     * 
     * @param {any} resource 
     * @return void
     */
    function openDialog(resource) {
      var config = {
        locals: {
          mapDialogInput: {
            model: resource,
            removeFn: vm.remove
          }
        },
        controller: 'MapDialogController',
        controllerAs: 'ctrl',
        templateUrl: Global.clientPath + '/map/dialog/map-dialog.html',
        hasBackdrop: true
      };

      C2Dialog.custom(config).then(function () {
        // reload the items from back-end
        vm.search();
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "Global"];
  angular.module('app').config(routes);

  /**
   * Configuration file for map route
   *
   * @param {object} $stateProvider
   * @param {object} Global
   */
  /** @ngInject */
  function routes($stateProvider, Global) {
    $stateProvider.state('app.map', {
      url: '/map',
      templateUrl: Global.clientPath + '/map/map.html',
      controller: 'MapController as mapCtrl',
      data: {}
    });
  }
})();
'use strict';

(function () {
  'use strict';

  MapService.$inject = ["serviceFactory"];
  angular.module('app').factory('MapService', MapService);

  /** @ngInject */
  function MapService(serviceFactory) {
    var model = serviceFactory('/heimap/map/', {
      actions: {},
      instance: {}
    });

    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  FileService.$inject = ["serviceFactory", "$http", "$q"];
  angular.module('app').factory('FileService', FileService);

  /** @ngInject */
  function FileService(serviceFactory, $http, $q) {
    var endPoint = '/heimap/file';
    var model = serviceFactory(endPoint, {
      actions: {},
      instance: {
        upload: upload
      }
    });

    function upload() {
      var deferred = $q.defer();
      var formData = new FormData();
      formData.append('file', this.file);
      if (angular.isDefined(this.map_image_file_id) && this.map_image_file_id !== null) {
        formData.append('map_image_file_id', this.map_image_file_id);
      }
      if (angular.isDefined(this.map_geo_file_projection) && this.map_geo_file_projection !== null) {
        formData.append('map_geo_file_projection', this.map_geo_file_projection);
      }

      $http.post(endPoint, formData, {
        transformRequest: angular.identity,
        headers: {
          'Content-Type': undefined
        }
      }).then(function (result) {
        deferred.resolve(result.data);
      }, function (err) {
        deferred.reject(err);
      });
      return deferred.promise;
    }
    return model;
  }
})();
'use strict';

/**
 * Map Layer Service responsible for building basic layers, managing the state of the right and left viewers 
 * and its layers, as well as basic interactions supported by leaflet, like change opacity, reorder etc.
 * 
 * As a centralized service this service execute actions and broadcast events when the state changes
 * The following events are broadcasted:
 * 
 * ungeoreferencedLayerToBeLoaded
 * georeferencedLayerToBeLoaded
 * mapLayersChanged
 * addedMapLayer
 * removedMapLayer
 * removedAllMapLayers
 * mapHidden
 * mapShown
 * viewerHidden
 * viewerShown
 * mapLayersReordered
 * addedMapDraw
 */

(function () {
  'use strict';

  MapLayerService.$inject = ["leafletData", "leaflet", "lodash", "SupportService", "$rootScope", "$q", "$timeout"];
  angular.module('app').factory('MapLayerService', MapLayerService);

  function MapLayerService(leafletData, leaflet, lodash, SupportService, $rootScope, $q, $timeout) {
    var service = {
      buildDefaultLayers: buildDefaultLayers,
      addMapLayer: addMapLayer,
      removeMapLayer: removeMapLayer,
      hideMap: hideMap,
      showMap: showMap,
      // addMapLayer: addMapLayer,
      serverConfig: null,
      isAdded: isAdded,
      fitMapBounds: fitMapBounds,
      applyOpacity: applyOpacity,
      hasNonGeoreferencedLayer: hasNonGeoreferencedLayer,
      removeAllMapLayers: removeAllMapLayers,
      getViewerOverlays: getViewerOverlays,
      getViewerData: getViewerData,
      getDefaultCenter: getDefaultCenter,
      refreshMapResource: refreshMapResource,
      hideViewer: hideViewer,
      showViewer: showViewer,
      applyReorder: applyReorder,
      setWheelZoomStatus: setWheelZoomStatus,
      getViewerDraws: getViewerDraws,
      getOverlaysCountBool: getOverlaysCountBool,
      addWFSLayer: addWFSLayer
    };

    /**
     * Private property that stores the base layers / overlays 
     *  
     */
    var serviceData = {};

    /**
     * Get the viewer overlays
     * 
     * @param {any} viewerId 
     * @returns {}
     */
    function getViewerOverlays(viewerId) {
      var viewerData = getViewerData(viewerId);
      var overlays = angular.copy(viewerData.overlays);
      if (overlays && angular.isDefined(overlays.draw)) {
        delete overlays.draw;
      }
      return overlays;
    }

    /**
     * Get the viewer draws
     * 
     * @param {any} viewerId 
     * @returns {}
     */
    function getViewerDraws(viewerId) {
      var viewerData = getViewerData(viewerId);
      var overlays = angular.copy(viewerData.overlays);
      if (overlays && angular.isDefined(overlays.draw)) {
        return overlays.draw;
      }
    }

    /**
     * Set the mouse wheel scroll zoom control as enabled/disabled for a certain viewer
     * 
     * @param {string} viewerId 
     * @param {boolean} enabled
     * @returns void
     */
    function setWheelZoomStatus(viewerId, enabled) {
      leafletData.getMap(viewerId).then(function (map) {
        if (enabled === true) {
          map.scrollWheelZoom.enable();
        } else {
          map.scrollWheelZoom.disable();
        }
      });
    }

    /**
     * Get boolean. True if there are no overlays added.
     * 
     * 
     * 
     */
    function getOverlaysCountBool() {
      if (Object.values(serviceData)[0]["overlays"] == undefined && Object.values(serviceData)[1]["overlays"] == undefined) {
        return true;
      } else {
        return false;
      }
    }

    /**
     * Get view data by viewer ID
     * 
     * @param {any} viewerId 
     * @returns {}
     */
    function getViewerData(viewerId) {
      viewerId = parseMapViewerId(viewerId);
      if (viewerId in serviceData) {
        return serviceData[viewerId];
      }
      return {};
    }

    /**
     * Build the default base layers
     * @param {} options
     */
    function buildDefaultLayers(options) {
      options = angular.isUndefined(options) ? {} : options;

      SupportService.config().then(function (response) {
        service.serverConfig = response;
      });

      serviceData.leftMapViewer = {
        baselayers: getBaseLayers()
      };

      if (options.supportDrawing) {
        serviceData.leftMapViewer.overlays = {
          draw: {
            name: 'draw',
            type: 'group',
            visible: true,
            layerParams: {
              showOnSelector: false
            }
          }
        };
      }
      // At the beginning both map layers are equal
      serviceData.rightMapViewer = angular.copy(serviceData.leftMapViewer);
      listenAndApplyDraw();
    }

    /**
     * Apply draw as new layer on draw
     * 
     */
    function listenAndApplyDraw() {
      function keepDraw(viewerId) {
        leafletData.getMap(viewerId).then(function (map) {
          leafletData.getLayers(viewerId).then(function (baselayers) {
            // console.log("baselyer = ", baselayers);
            var drawnItems = baselayers.overlays.draw;
            // added condition to handle rectangle selection for Georef
            if (typeof drawnItems !== "undefined") {
              map.on('draw:created', function (e) {
                var layer = e.layer;
                drawnItems.addLayer(layer);
                var drawsGeoJson = layer.toGeoJSON();
                // broadcast the events
                $rootScope.$broadcast('mapLayersChanged');
                $rootScope.$broadcast('addedMapDraw', drawsGeoJson);
              }.bind(drawnItems));
            }
          });
        });
      }
      keepDraw('leftMapViewer');
      keepDraw('rightMapViewer');
    }

    /**
     * Get the default center for a layer
     */
    function getDefaultCenter() {
      // Heidelberg, Germany
      return {
        lat: 49.399228,
        lng: 8.680522,
        zoom: 8
      };
    }

    /**
     * Get the base layers
     */
    function getBaseLayers() {
      return {
        xyz: {
          name: 'OpenStreetMap',
          url: 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          type: 'xyz',
          opacity: 1,
          layerOptions: {
            zIndex: 0
          }
        },
        bingAerial: {
          name: 'Aerial',
          type: 'bing',
          key: 'Aj6XtE1Q1rIvehmjn2Rh1LR2qvMGZ-8vPS9Hn3jCeUiToM77JFnf-kFRzyMELDol',
          layerOptions: {
            type: 'Aerial',
            opacity: 1,
            zIndex: 0
          }
        },
        bingRoad: {
          name: 'Road',
          type: 'bing',
          key: 'Aj6XtE1Q1rIvehmjn2Rh1LR2qvMGZ-8vPS9Hn3jCeUiToM77JFnf-kFRzyMELDol',
          layerOptions: {
            type: 'Road',
            opacity: 1,
            zIndex: 0
          }
        },
        bingAerialWithLabels: {
          name: 'Aerial With Labels',
          type: 'bing',
          key: 'Aj6XtE1Q1rIvehmjn2Rh1LR2qvMGZ-8vPS9Hn3jCeUiToM77JFnf-kFRzyMELDol',
          layerOptions: {
            type: 'AerialWithLabels',
            opacity: 1,
            zIndex: 0
          }
        }
      };
    }

    /**
     * Build an additional overlays
     * @param {} resource 
     */
    function buildMapOverlay(resource) {
      var layer = {
        name: resource.title,
        type: 'wms',
        visible: true,
        url: service.serverConfig.base_ows_url,
        layerParams: {
          layers: resource.geoserver_layer_id,
          format: 'image/png',
          transparent: true,
          opacity: 0.7
        },
        layerOptions: {
          opacity: 0.7,
          tiled: true
        },
        resource: resource
      };
      return layer;
    }

    /**
     * Fit the map view to the bounds of a layer
     * @param object resource 
     * @param string mapComponentId 
     */
    function fitMapBounds(resource, viewerId) {
      viewerId = parseMapViewerId(viewerId);
      leafletData.getMap(viewerId).then(function (map) {
        var bounds = [[resource.map_top_left_long, resource.map_top_left_lat], [resource.map_right_bottom_long, resource.map_right_bottom_lat]];
        map.fitBounds(bounds);
      });
    }

    /**
     * Apply the layer defined opacity or the value defined in the layer transparency property
     * @param {} layer 
     * @param string viewerId 
     */
    function applyOpacity(layer) {
      leafletData.getLayers(layer.viewerId).then(function (layers) {
        var overlayId = parseMapOverlayId(layer.viewerId, layer.resource);
        layers.overlays[overlayId].setOpacity(layer.layerParams.opacity);
      });
    }

    /**
     * Add a map as a layer to the maps (left and right)
     * 
     * @param object resource representing map
     */
    function addMapLayer(resource, viewerId) {

      // console.log(resource)

      if (isAdded(resource, viewerId) === false) {

        prepareViewer(resource, viewerId).then(function () {
          // parse the viewer id and make sure that
          // the overlays property is initialized
          viewerId = parseMapViewerId(viewerId);
          if (angular.isUndefined(serviceData[viewerId].overlays)) {
            serviceData[viewerId].overlays = {};
          }

          // build a new overlay
          var newLayer = buildMapOverlay(resource);
          // set the viewerId in as a property (in some loop it can be useful)
          newLayer.viewerId = viewerId;
          var overlayId = parseMapOverlayId(viewerId, resource);

          // add the new layer as a property of the layer
          serviceData[viewerId].overlays[overlayId] = newLayer;

          // fit the bounds of the new loaded map layer, so it is visible
          fitMapBounds(resource, viewerId);
          listenAndApplyDraw();

          // broadcast the events
          $rootScope.$broadcast('mapLayersChanged');
          $rootScope.$broadcast('addedMapLayer', resource);
          showMap(resource, viewerId);
        });
      }
    }

    /**
     * Prepare sa viewer for loading map layer according its georeferencing status
     * 
     * @param {any} resource 
     * @param {any} viewerId 
     * @returns promise 
     */
    function prepareViewer(resource, viewerId) {
      if (resource.georeferenced === false) {
        return prepareForUngeoreferenced(viewerId);
      } else {
        return prepareForGeoreferenced(viewerId);
      }
    }

    /**
     * Prepare the viewer to load an ungeoreferenced layer, removing all the base layers and overlays
     * @param {} viewerId 
     * @returns promise
     */
    function prepareForUngeoreferenced(viewerId) {
      var deferred = $q.defer();
      $rootScope.$broadcast('ungeoreferencedLayerToBeLoaded', viewerId);

      // to give the opportunity to the ungeoreferencedLayerToBeLoaded event listeners
      // to do some action before the viewer is prepared, it is necessary to wait a little
      // so we use the timeout for that. 200 milliseconds appears to be enough
      $timeout(function () {
        serviceData[viewerId].overlays = {};
        serviceData[viewerId].baselayers = {};
        deferred.resolve();
      }, 200);

      // return the promise
      return deferred.promise;
    }

    /**
     * Prepare the viewer to load an ungeoreferenced layer, removing all the base layers and overlays
     * @param {} viewerId 
     * @returns promise
     */
    function prepareForGeoreferenced(viewerId) {
      var deferred = $q.defer();
      $rootScope.$broadcast('georeferencedLayerToBeLoaded', viewerId);

      // to give the opportunity to the ungeoreferencedLayerToBeLoaded event listeners
      // to do some action before the viewer is prepared, it is necessary to wait a little
      // so we use the timeout for that. 200 milliseconds appears to be enough
      $timeout(function () {
        serviceData[viewerId].baselayers = getBaseLayers();
        deferred.resolve();
      }, 200);

      // return the promise
      return deferred.promise;
    }

    /**
     * Remove a map resource from the overlays
     * @param {} resource map
     * @param string viewerId 
     */
    function removeMapLayer(resource, viewerId) {
      viewerId = parseMapViewerId(viewerId);
      var overlayId = parseMapOverlayId(viewerId, resource);
      delete serviceData[viewerId].overlays[overlayId];
      listenAndApplyDraw();
      $rootScope.$broadcast('mapLayersChanged');
      $rootScope.$broadcast('removedMapLayer', resource);
    }

    /**
     * Remove a map resource from the overlays
     * @param {} resource map
     * @param string viewerId 
     */
    function removeAllMapLayers(viewerId) {
      viewerId = parseMapViewerId(viewerId);
      serviceData[viewerId].overlays = {};
      $rootScope.$broadcast('mapLayersChanged');
      $rootScope.$broadcast('removedAllMapLayers');
    }

    /**
     * Hide a map but keep it in the loaded list
     * @param {} resource map
     * @param string viewerId 
     */
    function hideMap(resource, viewerId) {
      viewerId = parseMapViewerId(viewerId);
      var overlayId = parseMapOverlayId(viewerId, resource);
      serviceData[viewerId].overlays[overlayId].visible = false;
      $rootScope.$broadcast('mapLayersChanged');
      $rootScope.$broadcast('mapHidden', resource);
    }

    /**
     * Show a map previously loaded
     * @param {} resource map
     * @param string viewerId 
     */
    function showMap(resource, viewerId) {
      viewerId = parseMapViewerId(viewerId);
      var overlayId = parseMapOverlayId(viewerId, resource);
      serviceData[viewerId].overlays[overlayId].visible = true;
      $rootScope.$broadcast('mapLayersChanged');
      $rootScope.$broadcast('mapShown', resource);
    }

    /**
     * Hide a viewer
     * @param string viewerId 
     */
    function hideViewer(viewerId) {
      viewerId = parseMapViewerId(viewerId);
      serviceData[viewerId].visible = false;
      $rootScope.$broadcast('mapViewersChanged');
      $rootScope.$broadcast('viewerHidden', viewerId);
    }

    /**
     * Show a viewer     
     * @param string viewerId 
     */
    function showViewer(viewerId) {
      viewerId = parseMapViewerId(viewerId);
      serviceData[viewerId].visible = true;
      $rootScope.$broadcast('mapViewersChanged');
      $rootScope.$broadcast('viewerShown', viewerId);
    }

    /**
     * Parse a default layer id
     * @param string viewerId 
     */
    function parseMapViewerId(viewerId) {
      if (angular.isUndefined(viewerId) || viewerId === null) {
        viewerId = 'rightMapViewer';
      }
      return viewerId;
    }

    /**
     * Parse a default layer id
     * @param string viewerId 
     * @param {} resource map 
     */
    function parseMapOverlayId(viewerId, resource) {
      if (angular.isUndefined(viewerId) || viewerId === null) {
        viewerId = 'rightMapViewer';
      }
      var overlayId = viewerId + resource.id;
      return overlayId;
    }

    /**
     * check if a map resource is already loaded
     * 
     * @param object resource 
     */
    function isAdded(resource, viewerId) {
      viewerId = parseMapViewerId(viewerId);
      if (angular.isUndefined(serviceData[viewerId].overlays)) {
        return false;
      }
      var overlayId = parseMapOverlayId(viewerId, resource);
      return angular.isDefined(serviceData[viewerId].overlays[overlayId]);
      //return (resource.id in serviceData[viewerId].overlays);
    }

    /**
     * Check if  there are non georeferenced layers loaded in the viewer
     * 
     * @param string viewerId 
     * @returns boolean
     */
    function hasNonGeoreferencedLayer(viewerId) {
      viewerId = parseMapViewerId(viewerId);
      var nonGeoLayers = lodash.filter(getViewerOverlays(viewerId), function (layer) {
        return layer.resource.georeferenced === false;
      });
      return angular.isArray(nonGeoLayers) && nonGeoLayers.length > 0;
    }

    /**
     * Refresh the resource of a layer
     * @param {resource} resource 
     * @param string viewerId 
     */
    function refreshLayerResource(resource, viewerId) {
      viewerId = parseMapViewerId(viewerId);
      var overlayId = parseMapOverlayId(viewerId, resource);
      delete serviceData[viewerId].overlays[overlayId];
      addMapLayer(resource, viewerId);
    }

    /**
     * When a map is edited, refresh the map the map layer
     */
    function refreshMapResource(resource) {
      if (isAdded(resource, 'rightMapViewer')) {
        refreshLayerResource(resource, 'rightMapViewer');
      }
      if (isAdded(resource, 'leftMapViewer')) {
        refreshLayerResource(resource, 'leftMapViewer');
      }
    }

    /**
     * Apply the new order and broadcast the mapLayersReordered event
     * 
     * @param {any} layersInOrder 
     */
    function applyReorder(layersInOrder) {
      var counter = 1;
      // iterate over the layersInOrder and apply the new z-index of each one
      layersInOrder.slice().reverse().forEach(function (value) {
        // for each layer identification, we get the leaflet layers object
        leafletData.getLayers(value.viewerId).then(function (layers) {
          // we parse the mapOverlayId
          var overlayId = parseMapOverlayId(this.value.viewerId, this.value.resource);
          // apply the new z-index
          layers.overlays[overlayId].setZIndex(this.counter);
        }.bind({ value: value, counter: counter }));
        counter++;
      });

      // broadcast the event
      $rootScope.$broadcast('mapLayersReordered');
    }

    function addWFSLayer(layerName, viewerId) {
      console.log(">>> MaplayerService >>> addWFSLayer >>> ", layerName);
      leafletData.getMap(viewerId).then(function (map) {
        var tempLayer = new leaflet.WFS({
          url: 'https://demo.geo-solutions.it:443/geoserver/ows',
          typeNS: 'topp',
          typeName: 'tasmania_state_boundaries',
          /* url: 'http://0.0.0.0:8081/geoserver/ows',
          typeNS: 'public',
          typeName: '0_1536149875', // layerName */
          crs: leaflet.CRS.EPSG4326,
          geometryField: 'the_geom',
          style: {
            color: 'blue',
            weight: 2
          }
        }).addTo(map).on('load', function () {
          map.fitBounds(tempLayer.getLayers()[0].getBounds());
        });
      });
    }

    return service;
  }
})();
'use strict';

(function () {
  'use strict';

  MapMarkerService.$inject = ["lodash", "leaflet"];
  angular.module('app').factory('MapMarkerService', MapMarkerService);

  function MapMarkerService(lodash, leaflet) {
    var service = {
      buildMarker: buildMarker
    };

    /**
     * Builds a marker object
     * 
     * @param {object} defaultOptions 
     * @param {object} markerOptions
     * @returns {object} marker
     */
    function buildMarker(markersHolder, markerOptions) {
      var defaultOptions = {
        focus: true,
        draggable: true
      };

      angular.merge(defaultOptions, markerOptions);
      var mKey = getNextMarkerKey(markersHolder);
      var mId = 'm' + mKey;
      var classes = 'mk-div-icon ' + mId;

      // build the icon object to be used in the marker
      var mIcon = {
        type: 'div',
        className: classes,
        iconSize: null,
        html: '<div class="mk-icon-container mk-ok">' + mKey + '</div>' // mk-ok, mk-warn or mk-error


        // return the marker object with its properties/values
      };return {
        id: mId,
        lat: defaultOptions.lat,
        lng: defaultOptions.lng,
        focus: defaultOptions.focus,
        message: defaultOptions.message,
        draggable: defaultOptions.draggable,
        icon: mIcon
      };
    }

    /**
     * Get the next auto increment id that must be used for a new marker
     * 
     * @param {any} markersHolder 
     * @returns nextIndex
     */
    function getNextMarkerKey(markersHolder) {
      var max = 0;
      lodash.forOwn(markersHolder, function (value, key) {
        var keyIndex = parseInt(key.replace('m', ''));
        if (keyIndex > max) {
          max = keyIndex;
        }
      });

      return (max + 1).toString();
    }

    return service;
  }
})();
'use strict';

(function () {
  'use strict';

  MapProjectService.$inject = ["serviceFactory", "$q"];
  angular.module('app').factory('MapProjectService', MapProjectService);

  /** @ngInject */
  function MapProjectService(serviceFactory, $q) {
    var model = serviceFactory('/heimap/map-project', {
      actions: {},
      instance: {}
    });
    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  MapProjectionService.$inject = ["serviceFactory", "$q"];
  angular.module('app').factory('MapProjectionService', MapProjectionService);

  /** @ngInject */
  function MapProjectionService(serviceFactory, $q) {
    var model = serviceFactory('/heimap/map-projection', {
      actions: {},
      instance: {}
    });
    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  MapTypeService.$inject = ["serviceFactory", "$q"];
  angular.module('app').factory('MapTypeService', MapTypeService);

  /** @ngInject */
  function MapTypeService(serviceFactory, $q) {
    var model = serviceFactory('/heimap/map-type', {
      actions: {},
      instance: {}
    });
    return model;
  }
})();
'use strict';

/**
 * Map Layer Service responsible for storing and returning global viewer option used by multiple controllers.
 * 
 * As a centralized service this service change the option value when asked for and broadcast an event when
 * this change occurs. The following event is broadcasted:
 * 
 * viewerOptionChanged

 */
(function () {
  'use strict';

  MapViewerService.$inject = ["$rootScope"];
  angular.module('app').service('MapViewerService', MapViewerService);

  function MapViewerService($rootScope) {
    var service = {
      setOption: setOption,
      getOption: getOption
    };

    /**
     * Private property that stores the viewer global options 
     *  
     */
    var serviceData = {};

    /**
     * Define an option for a viewer with a given value
     * 
     * @param {any} viewerId 
     * @param {any} option 
     * @param {any} value 
     */
    function setOption(viewerId, option, value) {
      parseViewer(viewerId, option);
      serviceData[viewerId][option] = value;
      var changed = { viewerId: viewerId, option: viewerId, value: value };
      $rootScope.$broadcast('viewerOptionChanged', changed);
    }

    /**
     * Get an global option value, or, if it is not defined, the default value
     * 
     * @param {any} viewerId 
     * @param {any} option 
     * @param {any} defaultValue 
     * @returns 
     */
    function getOption(viewerId, option, defaultValue) {
      parseViewer(viewerId, option);
      if (angular.isUndefined(serviceData[viewerId][option])) {
        return defaultValue;
      }
      return serviceData[viewerId][option];
    }

    /**
     * Ensures that the viewer property exists
     * 
     * @param {any} viewerId 
     */
    function parseViewer(viewerId) {
      if (angular.isUndefined(serviceData[viewerId])) {
        serviceData[viewerId] = {};
      }
    }
    return service;
  }
})();
'use strict';

(function () {

  'use strict';

  ImportController.$inject = ["$controller", "ImportService"];
  angular.module('app').controller('ImportController', ImportController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function ImportController($controller, ImportService) {
    var vm = this;

    //Attributes Block

    //Functions Block

    // instantiate base controller
    $controller('CRUDController', { vm: vm, modelService: ImportService, options: { searchOnInit: false } });
  }
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "Global"];
  angular.module('app').config(routes);

  /**
   * Arquivo de configuração com as rotas específicas do recurso import
   *
   * @param {object} $stateProvider
   * @param {object} Global
   */
  /** @ngInject */
  function routes($stateProvider, Global) {
    $stateProvider.state('app.import', {
      url: '/import',
      templateUrl: Global.clientPath + '/import/import.html',
      controller: 'ImportController as importCtrl',
      data: {}
    });
  }
})();
'use strict';

(function () {
  'use strict';

  ImportService.$inject = ["serviceFactory"];
  angular.module('app').factory('ImportService', ImportService);

  /** @ngInject */
  function ImportService(serviceFactory) {
    var model = serviceFactory('import', {
      actions: {},
      instance: {}
    });

    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  SupportService.$inject = ["serviceFactory", "$http", "$q"];
  angular.module('app').factory('SupportService', SupportService);

  /** @ngInject */
  function SupportService(serviceFactory, $http, $q) {
    var endPoint = '/heimap/support';
    var model = serviceFactory(endPoint, {
      actions: {
        config: {
          method: 'GET',
          isArray: false,
          wrap: false,
          url: 'config',
          afterRequest: function afterRequest(response) {
            return response;
          }
        }
      },
      instance: {}
    });

    return model;
  }
})();
'use strict';

(function () {

  'use strict';

  PreferencesController.$inject = ["$controller", "PreferencesService"];
  angular.module('app').controller('PreferencesController', PreferencesController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function PreferencesController($controller, PreferencesService) {
    var vm = this;

    //Attributes Block

    //Functions Block

    // instantiate base controller
    $controller('CRUDController', { vm: vm, modelService: PreferencesService, options: { searchOnInit: false } });
  }
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "Global"];
  angular.module('app').config(routes);

  /**
   * Arquivo de configuração com as rotas específicas do recurso preferences
   *
   * @param {object} $stateProvider
   * @param {object} Global
   */
  /** @ngInject */
  function routes($stateProvider, Global) {
    $stateProvider.state('app.preferences', {
      url: '/preferences',
      templateUrl: Global.clientPath + '/preferences/preferences.html',
      controller: 'PreferencesController as preferencesCtrl',
      data: {}
    });
  }
})();
'use strict';

(function () {
  'use strict';

  PreferencesService.$inject = ["serviceFactory"];
  angular.module('app').factory('PreferencesService', PreferencesService);

  /** @ngInject */
  function PreferencesService(serviceFactory) {
    var model = serviceFactory('preferences', {
      actions: {},
      instance: {}
    });

    return model;
  }
})();
'use strict';

(function () {

    'use strict';

    ProjectController.$inject = ["$location", "Global"];
    angular.module('app').controller('ProjectController', ProjectController);

    /** @ngInject */
    // eslint-disable-next-line max-params
    function ProjectController($location, Global) {
        var vm = this;

        //Attributes Block

        //Functions Block

        // console.log($location.search());
        var qParams = $location.search();
        sessionStorage.clear();
        // sessionStorage.setItem("role", "admin");
        if (qParams.role === "admin") {
            sessionStorage.setItem("role", "1");
        } else if (qParams.role === "senior") {
            sessionStorage.setItem("role", "2");
        } else if (qParams.role === "user") {
            sessionStorage.setItem("role", "3");
        } else if (qParams.role === "guest") {
            sessionStorage.setItem("role", "4");
        }

        // console.log("appcontroller ", $localStorage);
        sessionStorage.setItem("projId", qParams.projId);
        sessionStorage.setItem("userId", qParams.userId);
        $location.url(Global.clientPath);
    }
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "Global"];
  angular.module('app').config(routes);

  /**
   * Arquivo de configuração com as rotas específicas do recurso export
   *
   * @param {object} $stateProvider
   * @param {object} Global
   */
  /** @ngInject */
  function routes($stateProvider, Global) {
    $stateProvider.state('app.project', {
      url: '/project',
      templateUrl: Global.clientPath + '/project/project.html',
      controller: 'ProjectController as projectCtrl',
      data: {}
    });
  }
})();
'use strict';

(function () {
  'use strict';

  ProjectService.$inject = ["serviceFactory"];
  angular.module('app').factory('ProjectService', ProjectService);

  /** @ngInject */
  function ProjectService(serviceFactory) {
    var model = serviceFactory('export', {
      actions: {},
      instance: {}
    });

    return model;
  }
})();
'use strict';

(function () {
  'use strict';

  FeatureService.$inject = ["lodash"];
  angular.module('app').factory('FeatureService', FeatureService);

  function FeatureService(lodash) {

    var service = {
      getAttribute: getAttribute,
      setAttribute: setAttribute,
      createObject: createObject,
      stitchObject: stitchObject,
      createObjectFromGeoJson: createObjectFromGeoJson,
      createGeoJson: createGeoJson,
      tearObject: tearObject
    };

    function getAttribute(featureId) {
      return { "abc": "def" };
    }

    function setAttribute(featureProperties) {
      console.log(">>> FeatureService >>> setAttribute ", featureProperties);
    }

    function createObject(obj) {
      console.log(">>> FeatureService >>> createObject ", obj);
      return obj;
    }

    function createObjectFromGeoJson(obj) {
      // console.log(">>> FeatureService >>> createObjectFromGeoJson ", obj.properties);

      if (lodash.size(obj.properties.key_cidoc_array.split("|")) === lodash.size(obj.properties.value_gazetteer_array.split("|"))) {
        var keyArr = obj.properties.key_cidoc_array.split("|");
        var valueArr = obj.properties.value_gazetteer_array.split("|");
        var temp = {
          // "id": obj.properties.type_crm
          "type_crm": obj.properties.type_crm
        };
        // console.log(" keyArr ", keyArr, valueArr);

        for (var i = 0; i < keyArr.length; i++) {
          if (valueArr[i].indexOf("[") !== -1) {
            if (valueArr[i] !== "[object Object]") {
              temp[keyArr[i]] = JSON.parse(valueArr[i]);
            }
          } else {
            if (keyArr[i] !== "type_crm") {
              temp[keyArr[i]] = valueArr[i];
            }
          }
        }
        temp["geom"] = obj.geometry;
        // console.log("temp = ", temp);
        return temp;
      }
    }

    /**
     * generate a object with has key : value pair
     * 
     * @param {*} keys 
     * @param {*} values 
     */
    function stitchObject(keys, values) {
      // console.log(">>> FeatureService >>> stitchObject ", keys, values);
      var returnObj = {};
      if (lodash.size(keys) === lodash.size(values)) {
        for (var i = 0; i < keys.length; i++) {
          returnObj[keys[i]] = values[i];
        }
        // console.log(">>> FeatureService >>> stitchObject ", returnObj);
        return returnObj;
      }
    }

    function tearObject(obj) {
      // console.log(">>> FeatureService >>> tearObject ", obj);
      // var returnObj = {};
      var keys = Object.keys(obj);
      var values = Object.values(obj);

      var resultVal = [];
      for (var i = 0; i < values.length; i++) {
        if (Array.isArray(values[i])) {
          resultVal.push(JSON.stringify(values[i]));
          // } else if(typeof values[i] === "string" || typeof values[i] === "object") {
        } else {
          resultVal.push(values[i]);
        }
      }
      // keys.push("geom");
      // values.push(feature.geometry);
      return {
        "keys": keys,
        "values": resultVal
      };
    }

    function createGeoJson(geojson, properties) {
      console.log(">>> FeatureService >>> createGeoJson ", geojson, properties);
    }

    return service;
  }
})();
'use strict';

(function () {

  'use strict';

  VectorController.$inject = ["$controller", "$scope", "VectorService", "Global"];
  angular.module('app').controller('VectorController', VectorController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function VectorController($controller, $scope, VectorService, Global) {
    var vm = this;

    // Functions Block     
    vm.onViewerActivate = onViewerActivate;
    vm.beforeViewerActivate = beforeViewerActivate;

    // Set the map viewer options
    var options = {
      supportListingView: false,
      supportDrawing: false,
      titleTranslKey: 'views.titles.vectorTitle',
      showVectorLayers: true,
      leftSideBar: Global.clientPath + '/vector/navs/vector-left-sidenav.html',
      rightSideBar: Global.clientPath + '/vector/navs/vector-right-sidenav.html'
      // bottomNav : false
    };

    // initialize empty markers object
    vm.rightMarkers = {};
    vm.leftMarkers = {};
    vm.layerNames = [];

    // instantiate the base MapViewerController
    $controller('MapViewerController', { vm: vm, $scope: $scope, options: options });

    /**
     * Actions executed before the base viewer is activated
     * 
     */
    function beforeViewerActivate() {}
    // get vector layers from API and list them in left side nav
    // getLayerNames();
    // get ProjId
    // console.log($scope.$parent);


    /**
     * Actions executed after the base viewer is activated
     * 
     */
    function onViewerActivate() {}
    // Set global viewer options
    // changed for resolving #184 
    // MapViewerService.setOption('rightMapViewer', 'showLoadMapInRight', false);
    // MapViewerService.setOption('rightMapViewer', 'showLoadMapInRight', true);
    // MapViewerService.setOption('leftMapViewer', 'showLoadMapInRight', true);


    /**
     * Get Layer name from API
     * 
     */
    function getLayerNames() {
      var layerService = new VectorService();
      layerService.getVectorLayers().then(function (result) {
        vm.layerNames = result;
        console.log("layerNames = ", vm.layerNames);
      }, function (err) {
        console.log(err);
        // the code inside this block will be fired if some error occur
        // here you can show some error message or do nothing, depending on the business rule

        //TODO: notify the user about the error?
      });
    }
  }
})();
'use strict';

(function () {
  'use strict';

  routes.$inject = ["$stateProvider", "Global"];
  angular.module('app').config(routes);

  /**
   * Configuration file for georeference route
   *
   * @param {object} $stateProvider
   * @param {object} Global
   */
  /** @ngInject */
  function routes($stateProvider, Global) {
    $stateProvider.state('app.vector', {
      url: '/vector',
      templateUrl: Global.clientPath + '/vector/vector.html',
      controller: 'VectorController as mapCtrl',
      data: {}
    });
  }
})();
'use strict';

(function () {
  'use strict';

  VectorService.$inject = ["serviceFactory", "$http", "$q"];
  angular.module('app').factory('VectorService', VectorService);

  /** @ngInject */
  function VectorService(serviceFactory, $http, $q) {
    var getVectorLayersUrl = "/heimap/vector/layers";

    var model = serviceFactory(getVectorLayersUrl, {
      actions: {},
      instance: {
        getVectorLayers: getVectorLayers,
        createVectorLayers: createVectorLayers,
        createFeatures: createFeatures,
        editVectorLayers: editVectorLayers,
        deleteVectorLayer: deleteVectorLayer,
        getAllFeatureVersion: getAllFeatureVersion,
        getFormData: getFormData,
        exportLayerGeoJson: exportLayerGeoJson
      }
    });

    function getVectorLayers(paramData) {
      // console.log(">>> VectorService >>> getVectorLayers ", previewGcpEndPoint, paramData);
      // http://localhost:8080/heimap/vector?user_id=112345&proj_id=312344&fetch=allLayers
      var getLayerUrl = "/heimap/vector";
      var deferred = $q.defer();

      $http({
        method: 'GET',
        url: getLayerUrl,
        params: paramData
      }).then(function successCallback(response) {
        // console.log("response ", response);
        deferred.resolve(response.data.items);
      }, function errorCallback(response) {
        deferred.reject(response);
      });

      return deferred.promise;
    }

    function createVectorLayers(paramData) {
      // console.log(">>> VectorService >>> createVectorLayers ", paramData);
      var createLayerUrl = "/heimap/vector/layer";
      var deferred = $q.defer();

      $http.post(createLayerUrl, paramData).then(function (result) {
        deferred.resolve(result.data);
      }, function (err) {
        deferred.reject(err);
      });

      return deferred.promise;
    }

    function createFeatures(paramData) {
      var createFeatureUrl = "/heimap/vector/feature";
      var deferred = $q.defer();

      $http.post(createFeatureUrl, paramData).then(function successCallback(response) {
        deferred.resolve(response.data);
      }, function errorCallback(response) {
        deferred.reject(response);
      });
      return deferred.promise;
    }

    function deleteVectorLayer(paramData) {
      var delLayerUrl = "/heimap/vector/layer";
      var deferred = $q.defer();

      $http.post(delLayerUrl, paramData).then(function successCallback(response) {
        deferred.resolve(response.data);
      }, function errorCallback(response) {
        deferred.reject(response);
      });
      return deferred.promise;
    }

    function editVectorLayers(paramData) {
      var editLayerUrl = "/heimap/vector/layer";
      var deferred = $q.defer();

      $http.post(editLayerUrl, paramData).then(function successCallback(response) {
        deferred.resolve(response.data);
      }, function errorCallback(response) {
        deferred.reject(response);
      });
      return deferred.promise;
    }

    function getAllFeatureVersion(paramData) {
      var getAllVersionUrl = "/heimap/vector";
      var deferred = $q.defer();

      $http({
        method: 'GET',
        url: getAllVersionUrl,
        params: paramData
      }).then(function successCallback(response) {
        // console.log("response ", response);
        deferred.resolve(response.data.items);
      }, function errorCallback(response) {
        deferred.reject(response);
      });

      return deferred.promise;
    }

    function getFormData(paramData) {
      var getFormUrl = "/heimap/feature-source-type";
      var deferred = $q.defer();

      $http({
        method: 'GET',
        url: getFormUrl,
        params: paramData
      }).then(function successCallback(response) {
        // console.log("response ", response);
        deferred.resolve(response.data.items);
      }, function errorCallback(response) {
        deferred.reject(response);
      });
      // deferred.resolve([
      //   {"name":"buildingType","required":false,"type":"text","order":1,"placeholder":"buildingType","dependent":"buildingType"},
      //   {"name":"country","required":false,"type":"text","order":3,"placeholder":"country","dependent":"country"},
      //   {"name":"state","required":false,"type":"text","order":2,"placeholder":"state","dependent":"country"},
      //   {"name":"king","required":false,"type":"text","order":4,"placeholder":"king","dependent":"king"},
      //   {"name":"city","order":5,"placeholder":"city","dependent":"country","type":"select","options":[{"order":0,"name":"mumbai","value":"mumbai"},{"order":1,"name":"heidelberg","value":"heidelberg"}]},
      //   {"name":"language","order":6,"placeholder":"language","type":"multiple","dependent":"language","options":[{"order":0,"name":"english","value":"english"},{"order":1,"name":"german","value":"german"}],"value":["english"]},
      //   {"name":"description","order":7,"type":"textarea","placeholder":"description","value":"","dependent":"description","required":false}
      // ]);

      return deferred.promise;
    }

    function exportLayerGeoJson(paramData) {
      var exportUrl = "/heimap/vector";
      var deferred = $q.defer();

      $http({
        method: 'GET',
        url: exportUrl,
        params: paramData
      }).then(function successCallback(response) {
        // console.log("response ", response);
        deferred.resolve(response.data);
      }, function errorCallback(response) {
        deferred.reject(response);
      });

      return deferred.promise;
    }

    return model;
  }
})();
'use strict';

(function () {

  'use strict';

  GcpTableController.$inject = ["$scope", "$rootScope", "$translate", "C2Dialog", "$mdColors", "Global", "GeoreferenceService", "lodash"];
  angular.module('app').controller('GcpTableController', GcpTableController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function GcpTableController($scope, $rootScope, $translate, C2Dialog, $mdColors, Global, GeoreferenceService, lodash) {
    var vm = this;
    vm.deleteGCPFromTable = deleteGCPFromTable;
    vm.deleteGCPFromMap = deleteGCPFromMap;
    vm.refreshGCPTable = refreshGCPTable;
    vm.avgRmse = null;
    $scope.showTable = false;
    $scope.tableData = [];
    $scope.paginationLimit = 5;
    $scope.paginationCurrentPage = 1;

    // global variable used for refresh
    vm.geoRef = null;

    $rootScope.$on('previewGcp', function (event, args) {
      // console.log(">>> GcpTableController >>> previewGcpEvent", args);
      previewGcp(args);
    });

    $rootScope.$on('deleteGcpFromTableEvent', function (event, args) {
      // console.log(">>> GcpTableController >>> deleteGcpFromTableEvent", args);
      deleteGCPFromTable(args);
    });

    $rootScope.$on('refreshGcpTableEvent', function (event, args) {
      // console.log(">>> GcpTableController >>> refreshGcpTableEvent", args);
      refreshGCPTable();
    });

    $rootScope.$on('clearGcp', function (event, args) {
      // console.log(">>> GcpTableController >>> clearGcp", args);
      clearData();
    });

    /**
     * Start of the GCP Table controller
     * 
     */
    function init() {
      // console.log(">>> GcpTableController >>> init");
      // previewGcp();
    }

    function previewGcpInTable(tableData) {}
    // console.log(">>> GcpTableController >>> previewGcpInTable", tableData);
    // $scope.tableData = result.items[3];


    /**
     * Call the RMSE api to calculate the RMS error for each GCPoints
     * and fill the GCP table below to response data and creates marker on Left and Right Map
     * 
     * @param {object} geoRef
     */
    function previewGcp(geoRef) {
      // console.log(">>> GcpTableController >>> previewGcp");
      // $scope.showTable = true;
      // var geoRef = new GeoreferenceService();
      if (!vm.geoRef) {
        vm.geoRef = geoRef;
      }

      geoRef.previewGCP(geoRef).then(function (result) {
        // console.log("result from API ", result);
        $scope.tableData = result.items[3];
        if (angular.isDefined(result.items[2]["average error"])) {
          vm.avgRmse = result.items[2]["average error"];
        }
        // console.log("result from API ", $scope.tableData);
        //create marker object as required by leaflet marker object
        $scope.showTable = true;
        lodash.forEach($scope.tableData, function (markerFromDB) {
          // remove "m" from id attribute
          markerFromDB.gcpNo = markerFromDB.id[1];
          // markers for left map ie Non georeference
          // generateLeftMarker(markerFromDB, function() {
          //   generateRightMarker(markerFromDB);
          // });
        });
      }, function (err) {
        console.log(err);
        // the code inside this block will be fired if some error occur
        // here you can show some error message or do nothing, depending on the business rule

        //TODO: notify the user about the error?
      });
    }

    /**
     * Generate markers on Left Map
     * 
     * To be used when a user wants to view his or someone else's GCP
     * 
     * @param {object} markerFromDB
     * @param {object} callback
     */
    function generateLeftMarker(markerFromDB, callback) {
      var marker = null;
      marker = {
        "draggable": true,
        // "icon": {type: "div", className: "mk-div-icon "+markerFromDB.id, iconSize: null, html: "<div class=\"mk-icon-container mk-ok\">"+ tempMarkerNo +"</div>"},
        "id": markerFromDB.id,
        "latlng": {
          "lat": markerFromDB.imageX,
          "lng": markerFromDB.imageY
        },
        "message": undefined,
        "markersKeeper": "leftMarkers"

        // console.log("throw marker to georeference.controller ", marker);
      };$rootScope.$broadcast('createMarkerForTable', marker);
      // a delay of 10 millseconds for letting the markers be rendered on map and then firing for another map
      setTimeout(function () {
        callback();
      }, 10);
    }

    /**
     * Generate markers on Right Map
     * 
     * To be used when a user wants to view his or someone else's GCP
     * 
     * @param {object} markerFromDB
     */
    function generateRightMarker(markerFromDB) {
      var marker = null;

      marker = {
        "draggable": true,
        // "icon": {type: "div", className: "mk-div-icon "+markerFromDB.id, iconSize: null, html: "<div class=\"mk-icon-container mk-ok\">"+ tempMarkerNo +"</div>"},
        "id": markerFromDB.id,
        "latlng": {
          "lat": markerFromDB.lat,
          "lng": markerFromDB.lon
        },
        "message": undefined,
        "markersKeeper": "rightMarkers"

        // console.log("throw marker to georeference.controller ", marker);
      };$rootScope.$broadcast('createMarkerForTable', marker);
    }

    /**
     * delete event fired from GCP Table to delete the GCP from Left and Right Map 
     * 
     * @param {string} gcpId
     */
    function deleteGCPFromMap(gcpId) {
      // console.log(">>> GcpTableController >>> deleteGCPFromMap ", gcpId, $scope.tableData);
      // check if gcpId aexist in Table data
      // console.log(_.find($scope.tableData, ['id', gcpId]));
      if (_.find($scope.tableData, ['id', gcpId])) {
        // TODO : call some event to delete markers from both the maps 
        var temp = {
          model: {
            id: gcpId,
            eventFrom: "gcpTable"
          }
        };
        // fire a event to remove markers from maps
        $rootScope.$broadcast("leafletDirectiveMarker.leftMapViewer.click", temp);
        // $rootScope.$broadcast("leafletDirectiveMarker.leftMapViewer.click", temp);
        // delete from table
        $scope.tableData = _.filter($scope.tableData, function (o) {
          return !(o.id === gcpId);
        });
        // console.log("filteredTableData = ", $scope.tableData);
      }
      refreshGCPTable();
    }

    /**
     * Delete event fired from map to delete the GCP from Table 
     * 
     * @param {string} gcpId
     */
    function deleteGCPFromTable(gcpId) {
      // console.log(">>> GcpTableController >>> deleteGCPFromTable ", gcpId, $scope.tableData);
      // check if gcpId aexist in Table data
      // console.log(_.find($scope.tableData, ['id', gcpId]));
      if (_.find($scope.tableData, ['id', gcpId])) {
        $scope.tableData = _.filter($scope.tableData, function (o) {
          return !(o.id === gcpId);
        });
        // console.log("filteredTableData = ", $scope.tableData);
      }
      refreshGCPTable();
    }

    /**
     * Refresh GCP from Table with current GCP
     * 
     */
    function refreshGCPTable() {
      // console.log(">>> GcpTableController >>> refreshGCPTable ", vm.geoRef);
      if (vm.geoRef) {
        $scope.showTable = false;
        if (_.size(vm.geoRef.imageCoordinates) >= 3 && _.size(vm.geoRef.worldCoordinates) >= 3) {
          // check if both the maps have same number of GCPs
          if (_.size(vm.geoRef.imageCoordinates) === _.size(vm.geoRef.worldCoordinates)) {
            // console.log(_.size(vm.geoRef.imageCoordinates) + " - "+ _.size(vm.geoRef.worldCoordinates))
            previewGcp(vm.geoRef);
          } else {
            var config = {
              title: $translate.instant('dialog.invalidGeorefTitle'),
              description: $translate.instant('dialog.invalidGeorefText'),
              toolbarBgColor: $mdColors.getThemeColor('primary'),
              okBgColor: $mdColors.getThemeColor('primary'),
              ok: $translate.instant('global.ok')
            };
            C2Dialog.alert(config);
          }
        }
      }
    }

    function clearData() {
      vm.geoRef = null;
      $scope.showTable = false;
      $scope.tableData = [];
    }

    init();
  }
})();
'use strict';

(function () {

  'use strict';

  GeoLeftSidenavController.$inject = ["$scope", "$timeout", "$mdSidenav", "$log", "$rootScope", "lodash", "$mdSelect", "$window", "MapLayerService", "GeoreferenceService", "C2Toast", "$translate", "Global", "$mdColors", "C2Dialog", "$mdDialog", "$state", "leafletData", "$localStorage"];
  angular.module('app').controller('GeoLeftSidenavController', GeoLeftSidenavController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function GeoLeftSidenavController($scope, $timeout, $mdSidenav, $log, $rootScope, lodash, $mdSelect, $window, MapLayerService, GeoreferenceService, C2Toast, $translate, Global, $mdColors, C2Dialog, $mdDialog, $state, leafletData, $localStorage) {
    var vm = this;

    vm.close = close;
    vm.save = save;
    vm.rectifyDisable = rectifyDisable;
    vm.previewGcp = previewGcp;
    vm.generateFilenameandExtent = generateFilenameandExtent;
    vm.minx = null;
    vm.miny = null;
    vm.maxx = null;
    vm.maxy = null;
    vm.gcp = null;
    vm.manualExtent = false;
    $scope.extentSelection = '0';

    $scope.$watch("extentSelection", function (newVal, old) {
      // if 2 selected means draw manaul rect
      if (newVal === 2) {
        // removeExtentRectangle(function() {
        drawRectangleForExtent();
        // });
      } else if (newVal === 1) {
        cleanUp();
        // calculate minx, miny values
        calcMinMaxValues();
      } else if (newVal === 0) {
        // remove Extent rectangle from map
        cleanUp();
      }
    });

    // emit listener when save of Georeference controller called. It passes the GCP on left panel
    $rootScope.$on('saveGeoRef', function (event, args) {
      // console.log(">>> ge.left.sidenav.controller >>> saveGeoRef ", args);
      vm.gcp = args;
      // redraw the resampling method dropdown
      getResamplingMethodsBasedOnGCP(Object.keys(vm.gcp).length);
      // redraw the rectify method dropdown
      getRectifyMethodsBasedOnGCP(Object.keys(vm.gcp).length);
    });

    /**
     * Enables / Disables Rectify options in dropdown based on number of GCPS
     * 
     */
    function rectifyDisable(id) {
      // Can't access numOfGCP() fun of georeference.controller.js here.
      if (id == "2ndOrderPolyn") {
        return false; // GeoreferenceController.numOfGCP >= 6
      } else if (id == "3rdOrderPolyn") {
        return false; // GeoreferenceController.numOfGCP >= 10
      } else {
          return false; // Keep the button enabled for Auto and 1st Order
        }
    }

    /**
     * First function called after the controller is ran
     * here the stuff are initialized
     * 
     */
    function activate() {
      // console.log(">>> ge.left.sidenav.controller >>> activate ");
      vm.rectifyMethods = getRectifyMethods();
      vm.rectifyMethod = lodash.find(vm.rectifyMethods, function (rm) {
        // return rm.id === 'AutoBasedOnGCP';
        return rm.id === ''; // To not allow 'AutoBasedOnGCP' to be there by default
      });
      vm.resamplingMethods = getResamplingMethods();
      vm.resamplingMethod = lodash.find(vm.resamplingMethods, function (rm) {
        // return rm.id === 'near';
        return rm.id === ''; // To not allow 'near' to be there by default.
      });
      monitorCloseSelect();
      $mdSidenav('left').onClose(function () {
        $mdSelect.hide();
      });
      vm.geoRefFilename = '';
      // resolving #208
      if (!lodash.isEmpty($localStorage.getObject("georefLayer"))) {
        // remove base layer
        $timeout(function () {
          MapLayerService.removeAllMapLayers("leftMapViewer");
        }, 200);
        // Add layer to right map
        MapLayerService.addMapLayer($localStorage.getObject("georefLayer"), "rightMapViewer");
        // Add image layer to left map
        MapLayerService.addMapLayer($localStorage.getObject("nongeorefLayer"), "leftMapViewer");
        $localStorage.remove("georefLayer");
        $localStorage.remove("nongeorefLayer");
      }
    }

    /**
     * Close this sidenav
     * 
     */
    function close() {
      $mdSidenav('left').close();
    }

    /**
     * Open this sidenav
     * 
     */
    function open() {
      $mdSidenav('left').open();
    }

    /**
     * Get the the rectify methods available to be used
     * 
     * @returns {array}
     */
    function getRectifyMethods() {
      return [{ name: 'Auto (based on GCP)', id: 'AutoBasedOnGCP', disable: true }, { name: '1st Order Polyn. (min 3 points required)', id: '1stOrderPolyn', disable: true }, { name: '2nd Order Polyn. (min 6 points required)', id: '2ndOrderPolyn', disable: true }, { name: '3rd Order Polyn. (min 10 points required)', id: '3rdOrderPolyn', disable: true }];
    }

    /**
     * Get the the rectify methods based on number of GCP
     * 
     * @returns {array}
     */
    function getRectifyMethodsBasedOnGCP() {
      /* vm.rectifyMethods = [
        {name: 'Auto (based on GCP)', id: 'AutoBasedOnGCP', disable: false},
        { name: '1st Order Polyn. (min 3 points required)',id: '1stOrderPolyn', disable: false},
        { name: '2nd Order Polyn. (min 6 points required)',id: '2ndOrderPolyn', disable: false},
        { name: '3rd Order Polyn. (min 10 points required)',id: '3rdOrderPolyn', disable: false}
      ]; */
      if (Object.keys(vm.gcp).length >= 3 && Object.keys(vm.gcp).length < 6) {
        vm.rectifyMethods = [{ name: 'Auto (based on GCP)', id: 'AutoBasedOnGCP', disable: false }, { name: '1st Order Polyn. (min 3 points required)', id: '1stOrderPolyn', disable: false }, { name: '2nd Order Polyn. (min 6 points required)', id: '2ndOrderPolyn', disable: true }, { name: '3rd Order Polyn. (min 10 points required)', id: '3rdOrderPolyn', disable: true }];
      } else if (Object.keys(vm.gcp).length >= 6 && Object.keys(vm.gcp).length < 10) {
        vm.rectifyMethods = [{ name: 'Auto (based on GCP)', id: 'AutoBasedOnGCP', disable: false }, { name: '1st Order Polyn. (min 3 points required)', id: '1stOrderPolyn', disable: false }, { name: '2nd Order Polyn. (min 6 points required)', id: '2ndOrderPolyn', disable: false }, { name: '3rd Order Polyn. (min 10 points required)', id: '3rdOrderPolyn', disable: true }];
      } else if (Object.keys(vm.gcp).length >= 10) {
        vm.rectifyMethods = [{ name: 'Auto (based on GCP)', id: 'AutoBasedOnGCP', disable: false }, { name: '1st Order Polyn. (min 3 points required)', id: '1stOrderPolyn', disable: false }, { name: '2nd Order Polyn. (min 6 points required)', id: '2ndOrderPolyn', disable: false }, { name: '3rd Order Polyn. (min 10 points required)', id: '3rdOrderPolyn', disable: false }];
      }
      // if user have already selected an option from dropdown than reselected it
      if (typeof vm.rectifyMethod !== "undefined") {
        lodash.forEach(vm.rectifyMethods, function (method) {
          if (method.id === vm.rectifyMethod.id) {
            vm.rectifyMethod = method;
          }
        });
      }
    }

    /**
     * Get the the resampling methods available to be used
     * 
     * @returns {array}
     */
    function getResamplingMethods() {
      return [
      // id = gdalwarp parameter
      { name: 'Nearest neighbour resampling', id: 'near', disable: true }, { name: 'Bilinear resampling', id: 'bilinear', disable: true }, { name: 'Cubic resampling', id: 'cubic', disable: true }];
    }

    /**
     * Get the the resampling methods based on the number of GCP points available
     * 
     * @returns {array}
     */
    function getResamplingMethodsBasedOnGCP() {
      if (Object.keys(vm.gcp).length < 3) {
        vm.resamplingMethods = [{ name: 'Nearest neighbour resampling', id: 'near', disable: false }, { name: 'Bilinear resampling', id: 'bilinear', disable: false }, { name: 'Cubic resampling', id: 'cubic', disable: false }];
      } else if (Object.keys(vm.gcp).length >= 3 && Object.keys(vm.gcp).length < 6) {
        vm.resamplingMethods = [{ name: 'Nearest neighbour resampling', id: 'near', disable: false }, { name: 'Bilinear resampling', id: 'bilinear', disable: true }, { name: 'Cubic resampling', id: 'cubic', disable: true }];
      } else if (Object.keys(vm.gcp).length >= 6 && Object.keys(vm.gcp).length < 10) {
        vm.resamplingMethods = [{ name: 'Nearest neighbour resampling', id: 'near', disable: false }, { name: 'Bilinear resampling', id: 'bilinear', disable: false }, { name: 'Cubic resampling', id: 'cubic', disable: true }];
      } else if (Object.keys(vm.gcp).length >= 10) {
        vm.resamplingMethods = [{ name: 'Nearest neighbour resampling', id: 'near', disable: false }, { name: 'Bilinear resampling', id: 'bilinear', disable: false }, { name: 'Cubic resampling', id: 'cubic', disable: false }];
      }
      // if user have already selected an option from dropdown than reselected it
      if (typeof vm.resamplingMethod !== "undefined") {
        lodash.forEach(vm.resamplingMethods, function (method) {
          if (method.id === vm.resamplingMethod.id) {
            vm.resamplingMethod = method;
          }
        });
      }
    }

    /**
     * Gets called on resample Dropdown selection change, to get generate the 
     * 'filename' and extent 'value'
     * 
     */
    function generateFilenameandExtent() {
      // get the layer that contains the resource/map to be georeferenced
      var layer = MapLayerService.getViewerOverlays("leftMapViewer");

      // get the resource/map id from the loaded layer
      // as in the case of georeference module only one resource/map will
      // be loaded, we get the properties from the first resource in the layer
      var firstLayerKey = Object.keys(layer)[0];

      // Get new georefenced file name from the user
      vm.geoRefFilename = layer[firstLayerKey].resource.title + "_g_" + vm.rectifyMethod.id + "_" + vm.resamplingMethod.id + "_" + (new Date().getMonth() + 1) + "." + new Date().getDate() + "." + new Date().getFullYear();

      // calculate minx, miny values
      calcMinMaxValues();
      vm.bboxCropImage = vm.minx + " " + vm.miny + " " + vm.maxx + " " + vm.maxy;
    }

    /**
     * Calculates the minx, miny, maxx and maxy values based on GCP created 
     * on right map
     * 
     */
    function calcMinMaxValues() {
      // Crop final georeferenced image
      var lat = [];var lng = [];
      for (var i = 0; i < Object.keys($scope.$parent.vm.rightMarkers).length; i++) {
        lat.push(Object.values($scope.$parent.vm.rightMarkers)[i]["lat"]);
        lng.push(Object.values($scope.$parent.vm.rightMarkers)[i]["lng"]);
      }
      // assign the extent values to scope variable to diplay on page
      vm.minx = parseFloat(Math.min.apply(Math, lng).toFixed(5));
      vm.miny = parseFloat(Math.min.apply(Math, lat).toFixed(5));
      vm.maxx = parseFloat(Math.max.apply(Math, lng).toFixed(5));
      vm.maxy = parseFloat(Math.max.apply(Math, lat).toFixed(5));
    }

    /**
     * In a combination of leaflet, ui-leaflet, sidenav and md-select
     * when the md-select drop down options are open and the user clicks
     * outside the options overlay, the md-select is not been closed automatically
     * So, for instance we had to create this hack until we find a nice solution     * 
     */
    function monitorCloseSelect() {
      var $$window = angular.element($window);
      $$window.on('click', function (event) {
        if (event.target.classList[0] === 'md-sidenav-left') {
          $mdSelect.hide();
        }
      });
    };

    /**
     * Save//apply the georeference to the layer/resource loaded in the leftMapViewer
     * 
     */
    function save() {
      // check for number of markers on both maps to be equal
      if (Object.values($scope.$parent.vm.leftMarkers).length === Object.values($scope.$parent.vm.rightMarkers).length) {
        // get the layer that contains the resource/map to be georeferenced
        var layer = MapLayerService.getViewerOverlays("leftMapViewer");

        // instantiate the georeference service that is linked with the back-end end-point
        var geoRef = new GeoreferenceService();

        // get the markers from left and right viewers from parent controller
        geoRef.imageCoordinates = $scope.$parent.vm.leftMarkers;
        geoRef.worldCoordinates = $scope.$parent.vm.rightMarkers;
        geoRef.rectifyMethod = vm.rectifyMethod.id;
        geoRef.resamplingMethod = vm.resamplingMethod.id;

        // console.log($scope.$parent.vm);
        // console.log(vm);


        // get the resource/map id from the loaded layer
        // as in the case of georeference module only one resource/map will
        // be loaded, we get the properties from the first resource in the layer

        var firstLayerKey = Object.keys(layer)[0];
        geoRef.mapId = layer[firstLayerKey].resource.id;

        // Convert AutoBasedOnGCP to Order 
        var numCoordinates = Object.values(geoRef.imageCoordinates).length;
        geoRef.rectifyMethod == "AutoBasedOnGCP" ? numCoordinates >= 3 && numCoordinates < 6 ? geoRef.rectifyMethod = "1stOrderPolyn" : numCoordinates >= 6 && numCoordinates < 10 ? geoRef.rectifyMethod = "2ndOrderPolyn" : geoRef.rectifyMethod = "3rdOrderPolyn" : null;

        // Get new georefenced file name from the user
        // geoRef.newFileName = prompt("Enter new file name. Default is follows:", layer[firstLayerKey].resource.title + "_g_" + geoRef.rectifyMethod + "_" + geoRef.resamplingMethod + "_" + ((new Date()).getMonth()+1) + "." + (new Date()).getDate() + "." + (new Date()).getFullYear());
        // use the filename generated in 
        geoRef.newFileName = vm.geoRefFilename;

        // Crop final georeferenced image
        /* var lat = []; var lng = [];
        for (var i=0; i<Object.keys(geoRef.worldCoordinates).length; i++){
          lat.push(Object.values(geoRef.worldCoordinates)[i]["lat"]);
          lng.push(Object.values(geoRef.worldCoordinates)[i]["lng"])
        }
        var lngmin = Math.min.apply(Math, lng);
        var latmin = Math.min.apply(Math, lat);
        var lngmax = Math.max.apply(Math, lng);
        var latmax = Math.max.apply(Math, lat); */
        // geoRef.bboxCropImage = prompt("Enter coordinates to crop the image: min Lng, min Lat, max Lng, max Lat. Default extent, as shown below, is selected based from the provided GCPs. If don't want any cropping then simply delete the default coordinates.", lngmin + " " + latmin + " " + lngmax + " " + latmax);
        if ($scope.extentSelection == '0') {
          geoRef.bboxCropImage = "";
        }
        // if extent is by values provided by the user then just send 4 params to /apply API
        else if ($scope.extentSelection == '1') {
            geoRef.bboxCropImage = vm.minx + " " + vm.miny + " " + vm.maxx + " " + vm.maxy;
          }
          // if extent is by drawing a rectangle on map then send 8 params to /apply API
          else if ($scope.extentSelection == '2') {
              geoRef.bboxCropImage = vm.minx + " " + vm.miny + " " + vm.maxx + " " + vm.miny + " " + vm.maxx + " " + vm.maxy + " " + vm.minx + " " + vm.maxy;
            }
        // console.log(geoRef.bboxCropImage)

        geoRef.applyEndPoint = '/heimap/georef/apply';
        geoRef.$save()
        // geoRef.saveGeoRef()
        .then(function (result) {

          // console.log(result.id)
          // console.log(angular.isDefined(result.id))
          // console.log("zz");

          if (angular.isDefined(result.id)) {
            close();
            C2Toast.success($translate.instant('messages.saveGeoreferenceSuccess'));
          }

          for (var i = 0; i < numCoordinates; i++) {
            delete $scope.$parent.vm.leftMarkers[Object.values($scope.$parent.vm.leftMarkers)[0]["id"]];
            delete $scope.$parent.vm.rightMarkers[Object.values($scope.$parent.vm.rightMarkers)[0]["id"]];
          };

          //TODO: 
          /* update the viewer state with the georeferenced resource
              reset the GCP
          */
          /* var whereToGo = prompt("Enter your next action: 1 to view recently georeferenced image and/or georeference another image and 2 to upload new image", "1");
           switch(whereToGo){
            case "1": 
              MapLayerService.removeAllMapLayers("leftMapViewer"); 
              MapLayerService.addMapLayer(result, "rightMapViewer"); 
              break;
            case "2": 
              $window.location.href = '#!/map'; 
              break;
          } */

          // // fire event to GCP controller for call refreshGCPTable
          // $rootScope.$broadcast("refreshGcpTableEvent");
          // create popup box
          var confirm = $mdDialog.confirm().title('Next Action?').textContent('View recently georeferenced image and/or georeference another image OR upload a new image')
          // .ariaLabel('Lucky day')
          .ok('Load it in Right Map').cancel('Upload a new file');

          $mdDialog.show(confirm).then(function () {
            // console.log("Load in right map clicked");
            // MapLayerService.removeAllMapLayers("leftMapViewer"); 
            // MapLayerService.addMapLayer(result, "rightMapViewer"); 
            // resolving Dirk's request menitoned in #182
            // resolving #208 with use of localstorage
            var tempLeftLayer = layer[Object.keys(layer)[0]].resource;
            // delete it because it has reference to other Models, which creates a circular JSON
            if (typeof tempLeftLayer.$$array !== "undefined") {
              delete tempLeftLayer.$$array;
            }
            $localStorage.setObject("nongeorefLayer", tempLeftLayer);
            $localStorage.setObject("georefLayer", result);
            $state.reload();
          }, function () {
            // console.log("upload a new file");
            // change app state to map, first page of app
            $state.go('app.map');
          });
        }, function (err) {
          console.log(err);
          // the code inside this block will be fired if some error occur
          // here you can show some error message or do nothing, depending on the business rule

          //TODO: notify the user about the error?
        });
      } else {
        var config = {
          title: $translate.instant('dialog.invalidGeorefTitle'),
          description: $translate.instant('dialog.invalidGeorefText'),
          toolbarBgColor: $mdColors.getThemeColor('primary'),
          okBgColor: $mdColors.getThemeColor('primary'),
          ok: $translate.instant('global.ok')
        };
        C2Dialog.alert(config);
      }
    }

    /**
     * Show the GCP table in a preview table
     * 
     */
    function previewGcp() {
      // check for number of markers on both maps to be equal
      if (Object.values($scope.$parent.vm.leftMarkers).length === Object.values($scope.$parent.vm.rightMarkers).length) {
        if (vm.rectifyMethod && vm.resamplingMethod) {
          // get the layer that contains the resource/map to be georeferenced
          var layer = MapLayerService.getViewerOverlays("leftMapViewer");

          // instantiate the georeference service that is linked with the back-end end-point
          var geoRef = new GeoreferenceService();

          // get the markers from left and right viewers from parent controller
          geoRef.imageCoordinates = $scope.$parent.vm.leftMarkers;
          geoRef.worldCoordinates = $scope.$parent.vm.rightMarkers;
          geoRef.rectifyMethod = vm.rectifyMethod.id;
          geoRef.resamplingMethod = vm.resamplingMethod.id;

          // get the resource/map id from the loaded layer
          // as in the case of georeference module only one resource/map will
          // be loaded, we get the properties from the first resource in the layer

          var firstLayerKey = Object.keys(layer)[0];
          geoRef.mapId = layer[firstLayerKey].resource.id;

          // Convert AutoBasedOnGCP to Order 
          var numCoordinates = Object.values(geoRef.imageCoordinates).length;
          geoRef.rectifyMethod == "AutoBasedOnGCP" ? numCoordinates >= 3 && numCoordinates < 6 ? geoRef.rectifyMethod = "1stOrderPolyn" : numCoordinates >= 6 && numCoordinates < 10 ? geoRef.rectifyMethod = "2ndOrderPolyn" : geoRef.rectifyMethod = "3rdOrderPolyn" : null;

          // Get new georefenced file name from the user
          geoRef.newFileName = vm.geoRefFilename;

          // Crop final georeferenced image
          if (vm.manualExtent) {
            geoRef.bboxCropImage = vm.minx + " " + vm.miny + " " + vm.maxx + " " + vm.maxy;
            // console.log(geoRef.bboxCropImage)
          } else {
            geoRef.bboxCropImage = "";
          }

          $rootScope.$broadcast('previewGcp', geoRef);
        } else {
          // closing left sidenav since it was overlaping alert message
          close();
          var config = {
            title: $translate.instant('dialog.cantPreviewGcptableTitle'),
            description: $translate.instant('dialog.cantPreviewGcptableText'),
            toolbarBgColor: $mdColors.getThemeColor('primary'),
            okBgColor: $mdColors.getThemeColor('primary'),
            ok: $translate.instant('global.ok')
          };
          C2Dialog.alert(config);
        }
      } else {
        var config = {
          title: $translate.instant('dialog.invalidGeorefTitle'),
          description: $translate.instant('dialog.invalidGeorefText'),
          toolbarBgColor: $mdColors.getThemeColor('primary'),
          okBgColor: $mdColors.getThemeColor('primary'),
          ok: $translate.instant('global.ok')
        };
        C2Dialog.alert(config);
      }
    }

    function removeGcpTable() {
      // console.log(">>> ge.left.sidenav.controller >>> removeGcpTable ");
      angular.element(document.querySelector('#gcpTable')).empty();
    }
    /**
     * Starts the drawing interaction to draw a rectangle on left map to crop the image
     * 
     * Alternatively, COMMENTED CODE is for showing the extent rectangle on right map
     * 
     */
    function drawRectangleForExtent() {
      // console.log(">>> ge.left.sidenav.controller >>> drawRectangleForExtent ");
      close();
      C2Toast.success($translate.instant('messages.georefStartRectangleExtent'));
      var viewerId = "leftMapViewer";
      // disble marker creation by firing an event to Georeference controller
      $rootScope.$broadcast('toggleMarkerCreation', { 'markersKeeper': viewerId });

      leafletData.getMap(viewerId).then(function (map) {
        // Approach 2 : draw extent rectangle on right Map and let the user by able to edit it
        // if(map.hasLayer(drawnItems)){
        //   console.log(drawnItems);
        // }
        // var drawnItems = new L.FeatureGroup();

        // // drawnItems.forEach(function(layer) {
        // //   console.log(layer);
        // //   map.removeLayer(layer);
        // // });
        // // create a rectangle based on extend calculated
        // var extentRect = L.rectangle([[vm.miny, vm.minx], [vm.maxy, vm.maxx]]).addTo(drawnItems);
        // console.log(extentRect);
        // extentRect.type = extentRect.type || "Feature"; // Intialize feature.type
        // var props = extentRect.properties = extentRect.properties || {}; // Intialize feature.properties
        // props.title = "extentRectangleForCropping";
        // // props.content = "my content";
        // extentRect.editing.enable();
        // map.on('draw:editresize', function (e) {
        //   console.log("draw:editresize ", e.layer);
        //   vm.minx = e.layer.getBounds().getWest();
        //   vm.miny = e.layer.getBounds().getSouth();
        //   vm.maxx = e.layer.getBounds().getEast();
        //   vm.maxy = e.layer.getBounds().getNorth();
        // }.bind(drawnItems));
        // map.addLayer(drawnItems);

        // Approach 2 : Let the User draw rectangle on Left Map
        // FeatureGroup is to store editable layers
        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);
        var polygonDrawer = new L.Draw.Rectangle(map);
        polygonDrawer.enable();

        map.on('draw:created', function (e) {
          var layer = e.layer;
          layer.type = layer.type || "Feature"; // Intialize feature.type
          var props = layer.properties = layer.properties || {}; // Intialize feature.properties
          props.title = "extentRectangleForCropping";

          drawnItems.addLayer(layer);
          // var drawsGeoJson = layer.toGeoJSON();
          // console.log("poygon geojson = ", drawsGeoJson);
          vm.minx = layer.getBounds().getSouthWest().lng;
          vm.miny = layer.getBounds().getSouthWest().lat;
          vm.maxx = layer.getBounds().getNorthEast().lng;
          vm.maxy = layer.getBounds().getNorthEast().lat;
          // open the sidenav
          // open();
          // console.log("vm.minx = ", vm.minx, vm.miny, vm.maxx, vm.maxy);
        }.bind(drawnItems));
      });
    }

    /** 
     * If any rectangle drawn on left map than clears it and 
     * reinitializes min, max values to null
     */
    function cleanUp() {
      // console.log(">>> ge.left.sidenav.controller >>> cleanUp");
      // alway display extent rectangle in Right map
      var viewerId = "leftMapViewer";
      leafletData.getMap(viewerId).then(function (map) {
        lodash.forEach(map._layers, function (feature) {
          if (typeof feature.type !== "undefined") {
            if (feature.type === "Feature") {
              // console.log(feature);
              // feature.removeFrom(drawnItems);
              // feature.remove();
              map.removeLayer(feature);
            }
          }
        });
      });
      vm.minx = vm.miny = vm.maxx = vm.maxy = null;
    }

    /**
     * Removes Extent rectanlg from Right map before drawing a new one
     * **** Unused code, good for callback example
     */
    function removeExtentRectangle(callback) {
      console.log(">>> ge.left.sidenav.controller >>> removeExtentRectangle");
      // alway display extent rectangle in Right map
      var viewerId = "rightMapViewer";
      leafletData.getMap(viewerId).then(function (map) {
        // check if rectangle already drawn, if yes than remove it
        lodash.forEach(map._layers, function (feature) {
          if (typeof feature.type !== "undefined") {
            if (feature.type === "Feature") {
              console.log(feature);
              // feature.removeFrom(drawnItems);
              // feature.remove();
              map.removeLayer(feature);
            }
          }
        });
      });
      callback();
    }

    activate();
  }
})();
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('en-GB.i18n.attributes', _defineProperty({
    email: 'Email',
    password: 'Password',
    name: 'Name',
    image: 'Image',
    roles: 'Profiles',
    date: 'Date',
    initialDate: 'Initial date',
    finalDate: 'End date',
    title: 'Title',
    mapType: 'Map type',
    projection: 'Projection',
    georeferenced: 'Georeferenced',
    isGeoreferenced: 'Is georeferenced',
    isNotGeoreferenced: 'Is not georeferenced',
    mapOptions: 'Map options',
    verified: 'Verified',
    rectifyMethod: 'Rectify method',
    resamplingMethod: 'Resampling method',
    enterGeorefFileName: 'Georeferenced file name',
    extentGeoRef: 'Enter coordinates to crop the image: min Lng, min Lat, max Lng, max Lat. Default extent, as shown below, is selected based from the provided GCPs. If don\'t want any cropping then simply delete the default coordinates',
    minx: 'West',
    miny: 'South',
    maxx: 'East',
    maxy: 'North',
    cropImage: 'Crop Image based on Extent Values?',
    cropImageByDraw: 'Crop Image based by drawing on map?',
    cropImageNone: 'None',
    previewGCP: 'Show GCP Table',
    showOnlyChildMap: 'Show only Maps which used the loaded NonGeoreferenced image',
    description: 'Description',
    gazzType: 'CRM Entity Type',
    buildingType: 'Buidling Type',
    state: 'State',
    country: 'Country',
    timeSpan: 'Time Span',
    material: 'Material',
    refDocument: 'Document Reference',
    createdDate: 'Created Date',
    king: 'King'
  }, 'title', 'Title'));
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('en-GB.i18n.dialog', {
    confirmTitle: 'Confirm?',
    confirmDescription: 'Confirm action?',
    confirmLoadUngeoreferencedTitle: 'Confirm load ungeoreferenced map',
    confirmLoadGeoreferencedTitle: 'Confirm load georeferenced map',
    LoadUngeoreferencedDescription: 'If you load this ungeoreferenced map all base layers and other maps will be removed from the viewer. Do you want to proceed?',
    LoadGeoreferencedDescription: 'If you load this georeferenced map current ungeoreferenced layers will be removed from the viewer. Do you want to proceed?',
    removeDescription: 'Do you want to remove permanently {{name}}?',
    invalidGeorefTitle: 'Invalid number of Ground Control Points',
    invalidGeorefText: 'Same number of Ground Control Points and a minimum of 3 Ground Control Points is required in each viewer to georeference a map',
    login: {
      resetPassword: {
        description: 'Type your registered e-mail in the system.'
      }
    },
    cantLoadTitle: 'Can\'t link Both the maps',
    cantLoadDescription: 'Can\'t link maps since one of maps has Ungeoreferenced image',
    cantPreviewGcptableTitle: 'Select Rectify Method and Resampling Method',
    cantPreviewGcptableText: 'Please select Rectify Method and Resampling Method to Preview GCP'
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('en-GB.i18n.global', {
    loading: 'Loading...',
    processing: 'Processing...',
    yes: 'Yes',
    no: 'No',
    all: 'All',
    ok: 'OK'
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('en-GB.i18n.messages', {
    internalError: 'Internal error. contact the system admin',
    mapFileIsMandatory: 'Select a map file is mandatory',
    invalidImageFile: 'File selected is not a valid image file',
    fileTooBig: 'File selected is too big',
    notFound: 'Not found',
    notAuthorized: 'You do not have access to this functionality.',
    searchError: 'Search error.',
    saveSuccess: 'Item saved successfully.',
    saveGeoreferenceSuccess: 'Image has been rectified.',
    operationSuccess: 'Operation done with success.',
    operationError: 'Error while doing the operation',
    saveError: 'Error while trying to save the item.',
    removeSuccess: 'Removal done with success.',
    removeError: 'Error while trying to remove the item.',
    resourceNotFoundError: 'Item not found',
    notNullError: 'All the mandatory fields must be filled.',
    duplicatedResourceError: 'Already exists an item with these data.',
    deleteLayerTitle: 'Delete Layer?',
    deleteLayerMessage: 'Would you like to Delete layer?',
    yes: 'Yes',
    no: 'No',
    validate: {
      fieldRequired: 'The field {{field}} is mandatory.'
    },
    layout: {
      error404: 'Page no found'
    },
    login: {
      logoutInactive: 'You have been logged out. Login again.',
      invalidCredentials: 'Invalid credentials',
      unknownError: 'It was not possible to log you in. ' + 'Try again. If the error persists, contact the system administrator.',
      userNotFound: 'User not found'
    },
    dashboard: {
      welcome: 'Welcome {{userName}}',
      description: 'Use the for navigation.'
    },
    mail: {
      mailErrors: 'An error has occurred in the following e-mails:\n',
      sendMailSuccess: 'Email sent with success!',
      sendMailError: 'It was not possible to send the e-mail.',
      passwordSendingSuccess: 'The password recover process was initiated. If the e-mail does not arrive in 10 minutes, try again.'
    },
    user: {
      removeYourSelfError: 'You can not remove your own user.',
      userExists: 'User already exists!',
      profile: {
        updateError: 'It was not possible to update your profile.'
      }
    },
    map: {
      dropMap: 'Drop map here',
      selectAMap: 'Select a map image',
      selectAGeoFile: 'Select a geo file',
      clickToAdd: 'Click to add a new map'
    },
    georefStartRectangleExtent: 'Draw a Rectangle on Left Map'
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('en-GB.i18n.models', {
    user: 'User'
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('en-GB.i18n.views', {
    breadcrumbs: {
      user: 'Use admin',
      'user-profile': 'User profile',
      dashboard: 'Dashboard',
      audit: 'Audit',
      mail: 'Mail send',
      project: 'Projects',
      'not-authorized': 'Not authorized'
    },
    titles: {
      dashboard: 'Home page',
      mailSend: 'Send mail',
      taskList: 'Task list',
      userList: 'User list',
      auditList: 'Audit List',
      register: 'Register',
      resetPassword: 'Reset password',
      update: 'Update',
      addMap: 'Add map',
      editMap: 'Edit map',
      mapList: 'Map list',
      mapView: 'Map view',
      mapElements: 'Map elements',
      mapLayers: 'Map layers',
      newMap: 'New map',
      mapGeoreferencing: 'Map georeferencing',
      saveControlPoints: 'Save Control Points',
      vectorTitle: 'Vector',
      featureAttr: 'Feature Attribute',
      layerList: 'Layer list',
      addLayer: 'Add layer',
      editLayer: 'Edit layer'
    },
    actions: {
      send: 'Send',
      save: 'Save',
      clear: 'Clear',
      clearAll: 'Clear all',
      restart: 'Restart',
      filter: 'Filter',
      search: 'Search',
      list: 'List',
      edit: 'Edit',
      cancel: 'Cancel',
      update: 'Update',
      remove: 'Remove',
      getOut: 'Exit',
      add: 'Add',
      in: 'enter',
      loadImage: 'Load image',
      open: 'Open',
      close: 'Close',
      view: 'View',
      filterMaps: 'Filter maps',
      show: 'Show',
      hide: 'Hide',
      loadMapInLeft: 'Load in the left viewer',
      loadMapInRight: 'Load in the right viewer',
      hideMapLayer: 'Hide map layer',
      showMapLayer: 'Show map layer',
      removeMapLayer: 'Remove map layer',
      zoomToMapLayer: 'Zoom to map layer',
      loadedInLeftViewer: 'Loaded in the left viewer',
      loadedInRightViewer: 'Loaded in the right viewer',
      reset: 'Reset',
      unlinkLink: 'Unlink/link viewers',
      split: 'Split viewers',
      toggleVerified: 'Is or not a verified map?',
      toggleFavorite: 'Toggle favorite',
      toggleWheelZoom: 'Toggle wheel zoom',
      toggleMarkerCreation: 'Enable/disable marker creation',
      toggleMarkerRemoval: 'Enable/disable marker removal',
      saveGeoref: 'Save georef',
      loadGcpOnMap: 'Load GCP on Map',
      createlayer: 'New Layer',
      publish: 'Publish',
      showFeatureVersion: 'Show Features Version sdfgasdgasd asdgfasdgasdfga asdgasdgfasdfasd asdfasdfasdfasd asdfasdfasdf'
    },
    fields: {
      date: 'Date',
      action: 'Action',
      actions: 'Actions',
      opacity: 'Opacity',
      login: {
        resetPassword: 'Reset password',
        confirmPassword: 'Confirm password'
      },
      mail: {
        to: 'To',
        subject: 'Subject',
        message: 'Message'
      },
      user: {
        profile: 'Profiles',
        nameOrEmail: 'Name or e-mail'
      }
    },
    layout: {
      menu: {
        map: 'Map',
        export: 'Export',
        import: 'Import',
        vector: 'Vector',
        georeference: 'Georeference',
        preferences: 'preferences'
      },
      input: {
        select: 'Select'
      }
    },
    tooltips: {
      user: {
        profile: 'Profile',
        transfer: 'Transfer'
      }
    },
    pagination: {
      total: 'Total',
      items: 'Item(s)'
    }
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('de-DE.i18n.attributes', {
    email: 'Email',
    password: 'Password',
    name: 'Name',
    image: 'Image',
    roles: 'Profiles',
    date: 'Date',
    initialDate: 'Initial date',
    finalDate: 'End date',
    task: {
      description: 'Description',
      done: 'Done?',
      priority: 'Priority',
      scheduled_to: 'Scheduled to?',
      project: 'Project'
    },
    project: {
      cost: 'cost'
    },
    auditModel: {}
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('de-DE.i18n.dialog', {
    confirmTitle: 'Confirm?',
    confirmDescription: 'Confirm action?',
    removeDescription: 'Do you want to remove permanently {{name}}?',
    audit: {
      created: 'Created',
      updatedBefore: 'Updated before',
      updatedAfter: 'Updated after',
      deleted: 'Deleted'
    },
    login: {
      resetPassword: {
        description: 'Type your registered e-mail in the system.'
      }
    }
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('de-DE.i18n.global', {
    loading: 'Loading...',
    processing: 'Processing...',
    yes: 'Yes',
    no: 'No',
    all: 'All'
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('de-DE.i18n.messages', {
    internalError: 'Internal error. contact the system admin',
    mapFileIsMandatory: 'Select a map file is mandatory',
    invalidImageFile: 'File selected is not a valid image file',
    fileTooBig: 'File selected is too big',
    notFound: 'Not found',
    notAuthorized: 'You do not have access to this functionality.',
    searchError: 'Search error.',
    saveSuccess: 'Item saved successfully.',
    operationSuccess: 'Operation done with success.',
    operationError: 'Error while doing the operation',
    saveError: 'Error while trying to save the item.',
    removeSuccess: 'Removal done with success.',
    removeError: 'Error while trying to remove the item.',
    resourceNotFoundError: 'Item not found',
    notNullError: 'All the mandatory fields must be filled.',
    duplicatedResourceError: 'Already exists an item with these data.',
    validate: {
      fieldRequired: 'The field {{field}} is mandatory.'
    },
    layout: {
      error404: 'Page no found'
    },
    login: {
      logoutInactive: 'You have been logged out. Login again.',
      invalidCredentials: 'Invalid credentials',
      unknownError: 'It was not possible to log you in. ' + 'Try again. If the error persists, contact the system administrator.',
      userNotFound: 'User not found'
    },
    dashboard: {
      welcome: 'Welcome {{userName}}',
      description: 'Use the for navigation.'
    },
    mail: {
      mailErrors: 'An error has occurred in the following e-mails:\n',
      sendMailSuccess: 'Email sent with success!',
      sendMailError: 'It was not possible to send the e-mail.',
      passwordSendingSuccess: 'The password recover process was initiated. If the e-mail does not arrive in 10 minutes, try again.'
    },
    user: {
      removeYourSelfError: 'You can not remove your own user.',
      userExists: 'User already exists!',
      profile: {
        updateError: 'It was not possible to update your profile.'
      }
    }
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('de-DE.i18n.models', {
    user: 'User'
  });
})();
'use strict';

/*eslint angular/file-name: 0, no-undef: 0*/
(function () {
  'use strict';

  angular.module('app').constant('de-DE.i18n.views', {
    breadcrumbs: {
      user: 'Use admin',
      'user-profile': 'User profile',
      dashboard: 'Dashboard',
      audit: 'Audit',
      mail: 'Mail send',
      project: 'Projects',
      'not-authorized': 'Not authorized'
    },
    titles: {
      dashboard: 'Home page',
      mailSend: 'Send mail',
      taskList: 'Task list',
      userList: 'User list',
      auditList: 'Audit List',
      register: 'Register',
      resetPassword: 'Reset password',
      update: 'Update'
    },
    actions: {
      send: 'Send',
      save: 'Save',
      clear: 'Clear',
      clearAll: 'Clear all',
      restart: 'Restart',
      filter: 'Filter',
      search: 'Search',
      list: 'List',
      edit: 'Edit',
      cancel: 'Cancel',
      update: 'Update',
      remove: 'Remove',
      getOut: 'Exit',
      add: 'Add',
      in: 'enter',
      loadImage: 'Load image'
    },
    fields: {
      date: 'Date',
      action: 'Action',
      actions: 'Actions',
      login: {
        resetPassword: 'Reset password',
        confirmPassword: 'Confirm password'
      },
      mail: {
        to: 'To',
        subject: 'Subject',
        message: 'Message'
      },
      user: {
        profile: 'Profiles',
        nameOrEmail: 'Name or e-mail'
      }
    },
    layout: {
      menu: {
        dashboard: 'Dashboard',
        admin: 'Administration',
        examples: 'Examples',
        user: 'User',
        mail: 'Send email',
        audit: 'Audit'
      }
    },
    tooltips: {
      user: {
        profile: 'Profile',
        transfer: 'Transfer'
      }
    }
  });
})();
'use strict';

(function () {

    'use strict';

    MapDialogController.$inject = ["$controller", "MapService", "C2Dialog", "mapDialogInput", "FileService", "C2Toast", "$translate", "MapTypeService", "MapProjectionService", "MapProjectService", "lodash", "MapLayerService"];
    angular.module('app').controller('MapDialogController', MapDialogController);

    /** @ngInject */
    // eslint-disable-next-line max-params
    function MapDialogController($controller, MapService, C2Dialog, mapDialogInput, FileService, C2Toast, $translate, MapTypeService, MapProjectionService, MapProjectService, lodash, MapLayerService) {

        var vm = this;

        vm.onActivate = onActivate;
        vm.beforeSave = beforeSave;
        vm.afterSave = afterSave;
        vm.onFileRemove = onFileRemove;
        vm.removeFile = removeFile;
        vm.onActivate = onActivate;
        vm.close = close;
        vm.geoFileNeeded = false;
        vm.onImageFileChange = onImageFileChange;
        vm.onGeoFileChange = onGeoFileChange;
        vm.showGeoFileInput = showGeoFileInput;
        vm.showProjectionInput = showProjectionInput;
        vm.showGeorefBadge = showGeorefBadge;

        // instantiate base controller
        $controller('CRUDController', {
            vm: vm,
            modelService: MapService,
            options: {
                searchOnInit: false
            }
        });

        /**
         * Run initial functions on dialog openIng
         * @return void
         */
        function onActivate() {
            vm.saving = false;
            defineViewState();
            vm.removeMap = mapDialogInput.removeFn;
            MapTypeService.paginate().then(function (response) {
                vm.mapTypes = response.items;
                adjustResource();
            });
            MapProjectionService.paginate().then(function (response) {
                vm.projections = response.items;
            });

            MapProjectService.paginate().then(function (response) {
                vm.projects = response.items;
            });
        }

        /**
         * Check if a valid projection is selected and thus if we shall show the geo file input
         * 
         * @returns boolean
         */
        function showGeoFileInput() {
            return angular.isDefined(vm.resource.projection) && vm.resource.projection != null;
        }

        /**
         * Define the dialog view state as add or edit 
         * and parse the view title
         * @return void
         */
        function defineViewState() {
            vm.mode = angular.isDefined(mapDialogInput.model) ? 'edit' : 'add';
            if (vm.mode == 'add') {
                vm.viewTitle = $translate.instant('views.titles.addMap');
            } else {
                vm.viewTitle = $translate.instant('views.titles.editMap');
            }
        }

        function showProjectionInput() {
            var result = vm.geoFileNeeded && vm.mode === 'add';
            return result;
        }

        /**
         * Adjust resource mapping the field names and set the resource model
         * @return void
         */
        function adjustResource() {
            if (vm.mode === 'edit') {
                vm.resource = mapDialogInput.model;
                var mapType = lodash.find(vm.mapTypes, function (m) {
                    return m.id === vm.resource.field_map_type;
                });
                vm.resource.mapType = mapType;
                vm.geoFileNeeded = !vm.resource.mapImageFile.georeferenced;
            }
        }

        /**
         * Close the dialog
         * 
         */
        function close() {
            C2Dialog.close();
        }

        /**
         * Handle the after save event, refreshing the maps from server and closing the dialog
         * 
         */
        function afterSave() {
            vm.saving = false;
            if (angular.isDefined(mapDialogInput.onSave)) {
                mapDialogInput.onSave();
            }
            close();
            MapLayerService.refreshMapResource(vm.resourceUpdated);
        }

        /**
         * Check the constraints and adjust resource mapping the field names and set the resource model
         * 
         * @returns void
         */
        function beforeSave() {
            vm.saving = true;
            if (angular.isUndefined(vm.resource.mapImageFile)) {
                vm.saving = false;
                C2Toast.error($translate.instant('messages.mapFileIsMandatory'));
                return false;
            } else {
                vm.resource.image_file_id = vm.resource.mapImageFile.id;
                vm.resource.map_type_id = vm.resource.mapType.id;

                if (angular.isDefined(vm.resource.mapGeoFile)) {
                    vm.resource.field_map_geo_id = vm.resource.mapGeoFile.id;
                }
            }
            // While we don't have projects management, assign the first
            vm.resource.map_project_id = vm.projects[0].id;
            vm.resourceUpdated = angular.copy(vm.resource);
        }

        /**
         * Handles the file remove event, deleting the file from the back-end 
         * and removing it from the resource.files collection  
         * @param {any} fileData 
         */
        function onFileRemove() {}
        //vm.removeMap();


        /**
         * Handles the file remove event, deleting the file from the back-end 
         * and removing it from the resource.files collection
         */
        function removeFile(file) {
            var fileService = new FileService();
            fileService.id = file.id;

            if (angular.isDefined(fileService)) {
                fileService.$destroy().then(function () {
                    setStateAfterFileRemoval(file);
                });
            }
        }

        /**
         * Set the the variables state after a file (image or geo) is removed
         * 
         * @param {object} savedFileData 
         */
        function setStateAfterFileRemoval(removedFile) {
            setIsGeoreferenced();
            var isImage = angular.isDefined(removedFile.thumb) ? true : false;
            if (isImage) {
                vm.resource.mapImageFile = {};
                vm.resource.mapGeoFile = {};
                vm.geoFileNeeded = false;
            } else {
                vm.resource.mapGeoFile = {};
                vm.geoFileNeeded = !vm.resource.georeferenced;
            }
        }

        /**
         * Handles the image file change (when a file is added), preparing, and uploading it 
         * to the back-end and adding it to the client resource.files collection 
         */
        function onImageFileChange() {
            // In sequence we upload the new file (we dont have to wait the removal)
            var fileObj = vm.imageFile[0];
            if (angular.isDefined(fileObj) && !fileObj.isRemote) {
                if (fileObj.lfTagType === "image") {
                    // check whether the file size is less than 200 MB
                    if (fileObj.lfFile.size / 1024 / 1024 <= 200) {
                        var fileService = new FileService();
                        fileService.file = fileObj.lfFile;
                        uploadFile(fileService);
                    } else {
                        C2Toast.error($translate.instant('messages.fileTooBig'));
                    }
                } else {
                    C2Toast.error($translate.instant('messages.invalidImageFile'));
                }
            }
        }

        /**
         * Handles the geo file change (when a file is added), preparing, and uploading it 
         * to the back-end and adding it to the client resource.files collection 
         */
        function onGeoFileChange() {
            // We the has a image, we ask the server to remvoe this file
            // to avoid garbage in the back-end
            var imageId = null;
            if (angular.isDefined(vm.resource.mapImageFile) && angular.isDefined(vm.resource.mapImageFile.id)) {
                imageId = vm.resource.mapImageFile.id;
            }
            // In sequence we upload the new file (we dont have to wait the removal)
            var fileObj = vm.geoFile[0];
            if (angular.isDefined(fileObj) && !fileObj.isRemote) {
                var fileService = new FileService();
                fileService.file = fileObj.lfFile;
                fileService.map_image_file_id = imageId;
                fileService.map_geo_file_projection = vm.resource.projection.value;
                uploadFile(fileService);
            };
        }

        /**
         * Process a file upload (image or geo file)
         * 
         * @param {FileService} fileService 
         */
        function uploadFile(fileService) {
            fileService.upload().then(function (savedFileData) {
                setStateAfterFileUpload(savedFileData);
            });
        }

        /**
         * Set the the variables state after a file (image or geo) is uploaded
         * 
         * @param {object} savedFileData 
         */
        function setStateAfterFileUpload(savedFileData) {
            if (angular.isDefined(savedFileData.id)) {
                if (angular.isDefined(savedFileData.thumb)) {
                    vm.resource.mapImageFile = savedFileData;
                    // if(!vm.resource.mapImageFile.georeferenced){
                    if (!vm.resource.mapImageFile.isgeoref) {
                        vm.geoFileNeeded = true;
                    }
                } else {
                    vm.resource.mapGeoFile = savedFileData;
                    vm.geoFileNeeded = false;
                }
                setIsGeoreferenced();
            }
        }

        /**
         * Define a shorthand property if the map is georeferenced or not
         * 
         */
        function setIsGeoreferenced() {
            // vm.resource.georeferenced = vm.resource.mapImageFile.georeferenced === true || angular.isDefined(vm.resource.mapGeoFile.id);
            vm.resource.georeferenced = vm.resource.mapImageFile.isgeoref;
        }

        function showGeorefBadge() {
            if (vm.resource.georeferenced !== undefined && vm.mode !== 'edit') {
                return true;
            } else {
                return false;
            }
        }
    }
})();
'use strict';

(function () {

  'use strict';

  MapLeftSidenavController.$inject = ["$scope", "$timeout", "$mdSidenav", "$log", "$rootScope"];
  angular.module('app').controller('MapLeftSidenavController', MapLeftSidenavController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function MapLeftSidenavController($scope, $timeout, $mdSidenav, $log, $rootScope) {
    var vm = this;

    vm.close = function () {
      // Component lookup should always be available since we are not using `ng-if`
      $mdSidenav('left').close().then(function () {
        $log.debug("close LEFT is done");
      });
    };

    $rootScope.$on('addToWorkingList', function (event, data) {
      console.log(data); // 'Some data'
    });
  }
})();
'use strict';

(function () {
	'use strict';

	var app = angular.module('app');

	app.factory('$localStorage', ['$window', function ($window) {
		return {
			set: function set(key, value) {
				$window.localStorage[key] = value;
			},
			get: function get(key, defaultValue) {
				return $window.localStorage[key] || defaultValue;
			},
			setObject: function setObject(key, value) {
				$window.localStorage[key] = JSON.stringify(value);
			},
			getObject: function getObject(key) {
				return JSON.parse($window.localStorage[key] || '{}');
			},
			remove: function remove(key) {
				delete $window.localStorage[key];
			}
		};
	}]);
})();
'use strict';

(function () {
	'use strict';

	var app = angular.module('app');

	app.factory('$sessionStorage', ['$window', function ($window) {
		return {
			set: function set(key, value) {
				$window.sessionStorage[key] = value;
			},
			get: function get(key, defaultValue) {
				return $window.sessionStorage[key] || defaultValue;
			},
			setObject: function setObject(key, value) {
				$window.sessionStorage[key] = JSON.stringify(value);
			},
			getObject: function getObject(key) {
				return JSON.parse($window.sessionStorage[key] || '{}');
			},
			remove: function remove(key) {
				delete $window.sessionStorage[key];
			}
		};
	}]);
})();
'use strict';

(function () {
  'use strict';

  /** @ngInject */

  angular.module('app').component('box', {
    replace: true,
    templateUrl: ['Global', function (Global) {
      return Global.clientPath + '/shared/components/box.html';
    }],
    transclude: {
      toolbarButtons: '?boxToolbarButtons',
      footerButtons: '?boxFooterButtons'
    },
    bindings: {
      boxTitle: '@',
      toolbarClass: '@',
      toolbarBgColor: '@'
    },
    controller: ['$transclude', function ($transclude) {
      var ctrl = this;

      ctrl.transclude = $transclude;

      ctrl.$onInit = function () {
        if (angular.isUndefined(ctrl.toolbarBgColor)) ctrl.toolbarBgColor = 'default-primary';
      };
    }]
  });
})();
'use strict';

(function () {
  'use strict';

  /** @ngInject */

  angular.module('app').component('contentBody', {
    replace: true,
    transclude: true,
    templateUrl: ['Global', function (Global) {
      return Global.clientPath + '/shared/components/content-body.html';
    }],
    bindings: {
      layoutAlign: '@'
    },
    controller: [function () {
      var ctrl = this;

      ctrl.$onInit = function () {
        // Make a copy of the initial value to be able to reset it later
        ctrl.layoutAlign = angular.isDefined(ctrl.layoutAlign) ? ctrl.layoutAlign : 'center start';
      };
    }]
  });
})();
'use strict';

(function () {
  'use strict';

  /** @ngInject */

  angular.module('app').component('contentHeader', {
    templateUrl: ['Global', function (Global) {
      return Global.clientPath + '/shared/components/content-header.html';
    }],
    replace: true,
    bindings: {
      title: '@',
      description: '@'
    }
  });
})();
'use strict';

(function () {

  'use strict';

  MapViewerController.$inject = ["vm", "$scope", "options", "$controller", "MapService", "lodash", "Global", "C2Dialog", "MapTypeService", "leafletData", "leaflet", "$mdSidenav", "SupportService", "$rootScope", "MapLayerService", "$timeout", "$window", "$state", "$translate", "$mdColors", "C2Toast"];
  angular.module('app').controller('MapViewerController', MapViewerController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function MapViewerController(vm, $scope, options, $controller, MapService, lodash, Global, C2Dialog, MapTypeService, leafletData, leaflet, $mdSidenav, SupportService, $rootScope, MapLayerService, $timeout, $window, $state, $translate, $mdColors, C2Toast) {

    // Functions Block    
    vm.afterSearch = afterSearch;
    vm.onActivate = onActivate;
    vm.applyFilters = applyFilters;
    vm.toggleLeft = toggleLeft;
    vm.toggleRight = toggleRight;
    vm.switchToView = switchToView;
    vm.reset = reset;
    vm.toggleViewersCenterLink = toggleViewersCenterLink;
    vm.hideViewer = hideViewer;
    vm.showBothViewers = showBothViewers;
    vm.toggleWheelZoom = toggleWheelZoom;
    vm.toggleAddGCP = toggleAddGCP;

    // Set options as context variables
    vm.supportListingView = options.supportListingView;
    vm.supportDrawing = options.supportDrawing;
    vm.titleTranslKey = options.titleTranslKey;
    vm.showGeoRefTools = options.showGeoRefTools;
    vm.leftSideBar = options.leftSideBar;
    // vm.rightSideBar = options.rightSideBar;
    vm.showGcpTable = options.showGcpTable;
    vm.gcpTable = options.gcpTable;
    vm.displayBottomNav = false;

    if (angular.isUndefined(options.rightSideBar)) {
      vm.rightSideBar = Global.clientPath + "/shared/map-viewer/navs/map-right-sidenav.html";
    } else {
      vm.rightSideBar = options.rightSideBar;
    }

    if (angular.isUndefined(options.bottomNav)) {
      vm.displayBottomNav = true;
    } else {
      vm.displayBottomNav = false;
    }

    // instantiate base controller
    $controller('CRUDController', {
      vm: vm,
      modelService: MapService,
      options: {
        searchOnInit: true,
        perPage: 7
      }
    });

    /**
     * Execute the action when this controller is activated
     * 
     */
    function onActivate() {
      // call child onActivate function, if it exists
      if (angular.isFunction(vm.beforeViewerActivate)) {
        vm.beforeViewerActivate();
      }

      // Initially the bottom nav start retracted
      vm.showBottomNav = false;

      // Get the map types from the service
      MapTypeService.paginate().then(function (response) {
        vm.mapTypes = response.items;
      });

      // Build the options for the default layers building task      
      var options = {
        supportDrawing: vm.supportDrawing
      };

      // Build the base layers for both viewers (leftMapViewer and rightMapViewer)    
      MapLayerService.buildDefaultLayers(options);

      // check if at the beginning, both viewers 
      // should have draw capabilities and (if yes) add
      if (vm.supportDrawing === true) {
        vm.rightControls = {
          draw: {}
        };
        vm.leftControls = {
          draw: {}
        };
      }

      // Initial center in Heidelberg, Germany
      vm.leftCenter = MapLayerService.getDefaultCenter();

      // Get each viewer data
      vm.leftMapViewer = MapLayerService.getViewerData('leftMapViewer');
      vm.rightMapViewer = MapLayerService.getViewerData('rightMapViewer');

      // At the beginning, both viewers are visible     
      vm.showRightMapViewer = true;
      vm.showLeftMapViewer = true;

      // Initially, both maps should have the same center, moving together      
      vm.rightCenter = vm.leftCenter;

      // Refresh the viewers, so the tiles are loaded/adjusted
      // according the view size
      refreshMapViewer();

      // Initially the mouse wheel scroll as a zoom control starts disabled
      // so the user can scroll the page easily
      vm.rightWheelZoomEnabled = false;
      vm.leftWheelZoomEnabled = false;
      MapLayerService.setWheelZoomStatus('leftMapViewer', false);
      MapLayerService.setWheelZoomStatus('rightMapViewer', false);

      // call child onActivate function, if it exists
      if (angular.isFunction(vm.onViewerActivate)) {
        vm.onViewerActivate();
      }
    }

    /**
     * Switched the view and broadcast and event when the view is switched
     */
    function switchToView(view) {
      vm.goTo(view);
      $rootScope.$broadcast('switchedView', view);
      if (view === 'form') {
        // Refresh the viewers, so the tiles are loaded/adjusted
        // according the view size
        refreshMapViewer();
      }
    }

    /**
     * Diasble Add GCP Points button. The first time that the viewers load, the buttons should be disabled are there is no overlays other than baselayers.
     */
    function toggleAddGCP() {
      return MapLayerService.getOverlaysCountBool();
    }

    /**
     * Toggle the mouse wheel scroll as a zoom control for a viewer
     * 
     * @param {any} viewerId 
     */
    function toggleWheelZoom(viewerId) {
      if (viewerId === 'rightMapViewer') {
        vm.rightWheelZoomEnabled = !vm.rightWheelZoomEnabled;
        MapLayerService.setWheelZoomStatus(viewerId, vm.rightWheelZoomEnabled);
      } else {
        vm.leftWheelZoomEnabled = !vm.leftWheelZoomEnabled;
        MapLayerService.setWheelZoomStatus(viewerId, vm.leftWheelZoomEnabled);
      }
    }

    /**
     * Refresh the map on the viewer. 
     * Useful when the viewer is resized or switched from one/two viewers
     * 
     * @return void 
     */
    function refreshMapViewer() {
      // This is a hack to force leaflet redraw/resize correctly the maps
      // in the case when there are two map viewers and the container of one of them 
      // is resized. 
      // The candidates map.invalidateSize() and map.eachLayer(function(layer){layer.redraw();});
      // have not worked at all on this case
      // @see  https://github.com/Leaflet/Leaflet/issues/694
      $timeout(function () {
        // We manually fire the browser resize event inside a
        // timeout function with a delay of 1 tenth of second
        // For some reason, when this event occurs, leaflet
        // is able to resize/redraw the tiles correctly
        $window.dispatchEvent(new Event('resize'));
      }, 100);
    }

    /**
     * Hide a viewer
     * 
     * @param {any} viewerId 
     */
    function hideViewer(viewerId) {
      if (viewerId === 'leftMapViewer') {
        vm.showLeftMapViewer = false;
      } else {
        vm.showRightMapViewer = false;
      }
      // Tells the service that a viewer is now hidden
      // Internally the service propagate this so other controllers/services
      // can listen to this event and apply changes
      MapLayerService.hideViewer(viewerId);

      // As there is only one viewer, it must have used the full space
      vm.viewerWidth = 100;

      // This attribute is used to determine if the viewer split button must be shown
      vm.bothViewersVisible = false;

      // Refresh the viewers, so the tiles are loaded/adjusted
      // according to the view size
      refreshMapViewer();
    }

    /**
     * Show both the viewers, resize both to 50%
     * and refresh the viewers (reload the tiles)
     * 
     */
    function showBothViewers() {
      // As there are two viewers, each one must have half space
      vm.viewerWidth = 50;

      // if the right viewer is hidden, show it
      if (vm.showRightMapViewer === false) {
        vm.showRightMapViewer = true;

        // Tells the the service that a viewer is now shown
        // Internally the service propagate this so other controllers/services
        // can listen to this event and apply changes
        MapLayerService.showViewer('rightMapViewer');
      }

      // if the left viewer is hidden, show it
      if (vm.showLeftMapViewer === false) {
        vm.showLeftMapViewer = true;

        // Tells the the service that a viewer is now shown
        // Internally the service propagate this and other controllers/services
        // can listen to this event and apply changes
        MapLayerService.showViewer('leftMapViewer');
      }
      // This attribute is used to determine if the viewer split button must be shown
      vm.bothViewersVisible = true;

      // After the changes we refresh the viewers, to the tiles are adjusted
      refreshMapViewer();
    }

    /**
     * Link or unlink the center of both viewers
     * 
     * @param {string} masterViewer - the viewer from which the center will be used to centralized itself
     */
    function toggleViewersCenterLink(masterViewer) {
      // console.log(">>> map-viewer.controller >>> toggleViewersCenterLink >>> ", masterViewer);
      // if loaded ungeoreferenced file then can't link the maps
      // if the viewers' center are linked, unlink then
      // but keep them with the same center
      if (vm.rightCenter == vm.leftCenter) {
        vm.rightCenter = angular.copy(vm.leftCenter);
      }
      // if the viewers' center are not linked, link
      // them, moving the slave viewer's center to the center of
      // the 'master viewer' center passed as parameter
      else {
          if (!MapLayerService.hasNonGeoreferencedLayer('leftMapViewer')) {
            if (masterViewer === 'leftMapViewer') {
              vm.rightCenter = vm.leftCenter;
            } else {
              vm.leftCenter = vm.rightCenter;
            }
          } else {
            // console.log("can't load right map since right side is ungeorefernced")
            C2Toast.info($translate.instant('dialog.cantLoadDescription'));
          }
        }
    }

    /**
     * Listen to the event that tells us that an ungeoreferenced map will be loaded
     * and unlink the viewers' center. This event occurs before the map is loaded
     * and receive the viewer id where the ungeoreferenced mao will be loaded
     */
    $rootScope.$on('ungeoreferencedLayerToBeLoaded', function (event, viewerId) {
      // the toggle function unlink on viewer's center       
      if (vm.rightCenter == vm.leftCenter) {
        toggleViewersCenterLink(viewerId);
      }
    });

    /**
     * Listen to the event that tells us that an georeferenced map will be loaded
     * and link the viewers' center. This event occurs before the map is loaded
     * and receive the viewer id where the georeferenced mao will be loaded
     */
    $rootScope.$on('georeferencedLayerToBeLoaded', function (event, viewerId) {
      // the toggle function unlink on viewer's center       
      if (vm.rightCenter != vm.leftCenter) {
        toggleViewersCenterLink(viewerId);
      }
    });

    /**
     * Make some adjustments in the resources list after loading them
     * 
     * @param {any} response 
     */
    function afterSearch(response) {
      lodash.map(vm.resources, function (map) {
        map.mapImageFile = map.map_image_file;
        map.mapTypeName = map.map_type_name;
        map.mapGeoFile = map.field_map_geofile;
        return map;
      });
    }

    /**
     * Here we listen to the applyFilters callback to add custom filters
     * 
     * @param {any} defaultQueryFilters 
     * @returns {}
     */
    function applyFilters(defaultQueryFilters) {
      var filters = {};
      if (angular.isDefined(vm.queryFilters)) {
        if (angular.isDefined(vm.queryFilters.mapType)) {
          filters.field_map_type = angular.copy(vm.queryFilters.mapType.id);
        }
        filters.title = vm.queryFilters.title;
        if (vm.queryFilters.georeferenced !== 'All') {
          filters.georeferenced = vm.queryFilters.georeferenced;
        }
        if (vm.queryFilters.verified !== 'All') {
          filters.verified = vm.queryFilters.verified;
        }
      }

      return angular.extend(defaultQueryFilters, filters);
    }

    /**
     * Reset the search state and reload items
     */
    function reset() {
      vm.queryFilters = {};
      vm.search();
    }

    /**
     * Open/close the left side nav
     * 
     */
    function toggleLeft() {
      $mdSidenav('left').toggle();
    }

    /**
     * Open/close the right side nav
     * 
     */
    function toggleRight() {
      $mdSidenav('right').toggle();
    }

    /**
     * 
     * 
     */
    function deleteGCP(gcpId) {
      console.log(">>> ma-viewer.controller >>> deleteGCP ", gcpId);
    }
  }
})();
'use strict';

/*eslint-env es6*/

(function () {

  'use strict';

  MenuController.$inject = ["$mdSidenav", "$state", "$mdColors", "$rootScope"];
  angular.module('app').controller('MenuController', MenuController);

  /** @ngInject */
  function MenuController($mdSidenav, $state, $mdColors, $rootScope) {
    var vm = this;

    //Bloco de declaracoes de funcoes
    vm.open = open;
    vm.openMenuOrRedirectToState = openMenuOrRedirectToState;

    // added to make the menu highlighted
    vm.currentNavItem = $state.current.name;
    // root state change watcher to highlight the tab on each state change
    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
      // console.log("state changed from - ", fromState, " to - ", toState);
      vm.currentNavItem = toState.name;
    });
    activate();

    function activate() {
      // Array contendo os itens que são mostrados no menu lateral
      vm.itensMenu = [];
    }

    function open() {}

    /**
     * Método que exibe o sub menu dos itens do menu lateral caso tenha sub itens
     * caso contrário redireciona para o state passado como parâmetro
     */
    function openMenuOrRedirectToState($mdMenu, ev, item) {
      if (angular.isDefined(item.subItens) && item.subItens.length > 0) {
        $mdMenu.open(ev);
      } else {
        $state.go(item.state);
        $mdSidenav('left').close();
      }
    }

    function getColor(colorPalettes) {
      return $mdColors.getThemeColor(colorPalettes);
    }
  }
})();
'use strict';

(function () {

  'use strict';

  VectorLayerController.$inject = ["$state", "VectorService", "lodash", "C2Dialog", "C2Toast", "$translate", "mapDialogInput"];
  angular.module('app').controller('VectorLayerController', VectorLayerController);

  function VectorLayerController($state, VectorService, lodash, C2Dialog, C2Toast, $translate, mapDialogInput) {

    var vm = this;
    vm.save = save;
    vm.close = close;
    vm.mode = null;

    vm.viewTitle = "Add Layer";
    vm.resource = {
      title: null,
      description: null,
      // layerName: "vertex_proj_id_projectId1_layer_id_layerId_latest",
      proj_id: null,
      user_id: null,
      layerName: null,
      layerId: null
    };

    function init() {
      // console.log(">>> VectorLayerController >>> init ");
      defineViewState();
      if (angular.isDefined(mapDialogInput.model)) {
        vm.resource.title = mapDialogInput.model.title;
        vm.resource.description = mapDialogInput.model.desc;
        vm.resource.layerName = mapDialogInput.model.layerName;
        vm.resource.layerId = mapDialogInput.model.layerId;
        // console.log("init ...... ", vm.resource);
      }
    }

    function save() {
      // console.log(">>> VectorLayerController >>> save ", vm.resource);
      var vectorService = new VectorService();
      if (angular.equals(vm.mode, "add")) {
        if (!lodash.isEmpty(sessionStorage.getItem("projId"))) {
          vm.resource.proj_id = sessionStorage.getItem("projId");
          vm.resource.user_id = sessionStorage.getItem("userId");
        }
        var reqParam = {
          "action": "createLayers",
          "data": []
        };
        reqParam.data.push(vm.resource);
        vectorService.createVectorLayers(reqParam).then(function (response) {
          // console.log("response ", response);
          if (response === "success") {
            C2Toast.success($translate.instant('messages.saveSuccess'));
            close();
            // $state.reload();
            location.reload();
          } else {
            C2Toast.error($translate.instant('messages.saveError'));
          }
        }, function (err) {
          console.log(err);
        });
      } else if (angular.equals(vm.mode, "edit")) {
        if (!lodash.isEmpty(sessionStorage.getItem("projId"))) {
          vm.resource.proj_id = sessionStorage.getItem("projId");
          vm.resource.user_id = sessionStorage.getItem("userId");
        }
        // console.log("edit saving...... ", vm.resource);
        var reqParam = {
          "action": "editLayers",
          "data": [{
            "title": vm.resource.title,
            "description": vm.resource.description,
            "layer_id": vm.resource.layerId,
            "user_id": vm.resource.user_id,
            "proj_id": vm.resource.proj_id
          }]
        };
        // reqParam.data.push(vm.resource);
        vectorService.editVectorLayers(reqParam).then(function (response) {
          // console.log("response ", response);
          if (response === "success") {
            C2Toast.success($translate.instant('messages.saveSuccess'));
            close();
            $state.reload();
          } else {
            C2Toast.error($translate.instant('messages.saveError'));
          }
        }, function (err) {
          console.log(err);
        });
      }
    }

    /**
     * Define the dialog view state as add or edit 
     * and parse the view title
     * 
     * @return void
     */
    function defineViewState() {
      vm.mode = angular.isDefined(mapDialogInput.model) ? 'edit' : 'add';
      if (vm.mode == 'add') {
        vm.viewTitle = $translate.instant('views.titles.addLayer');
      } else {
        vm.viewTitle = $translate.instant('views.titles.editLayer');
      }
    }

    /**
     * Close the dialog
     * 
     */
    function close() {
      C2Dialog.close();
    }

    init();
  }
})();
'use strict';

(function () {

  'use strict';

  VectorLeftSidenavController.$inject = ["Global", "$mdSidenav", "$mdDialog", "$window", "lodash", "$rootScope", "C2Dialog", "C2Toast", "$translate", "$state", "leaflet", "leafletData", "$sessionStorage", "VectorService"];
  angular.module('app').controller('VectorLeftSidenavController', VectorLeftSidenavController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function VectorLeftSidenavController(Global, $mdSidenav, $mdDialog, $window, lodash, $rootScope, C2Dialog, C2Toast, $translate, $state, leaflet, leafletData, $sessionStorage, VectorService) {
    var vm = this;

    vm.layerClicked = layerClicked;
    vm.activateFeatureEdit = activateFeatureEdit;
    vm.deleteLayer = deleteLayer;
    vm.openAttributePopUp = openAttributePopUp;
    vm.layerVisibility = layerVisibility;
    vm.createLayer = createLayer;
    vm.save = save;
    vm.toggleLeft = toggleLeft;
    vm.exportLayer = exportLayer;
    vm.userAllow = userAllow;
    vm.drawControl = null; // toolbar control
    vm.drawnItems = null;
    vm.layers = [];
    vm.leafletLayers = [];
    vm.currentlyEditingLayer = null;
    vm.editMode = null;

    // Called from right side nav for adding newly created feature to leaflet layer
    $rootScope.$on('addFeatureToLayer', function (event, args) {
      // console.log(">>> VectorLeftSidenavController >>> addFeatureToLayer ", args);
      // leaflet.geoJSON(args, {}).addTo(vm.drawnItems);
      vm.drawnItems.addLayer(args);
      leafletData.getMap('leftMapViewer').then(function (map) {
        vm.drawnItems.addTo(map);
      });
    });

    /**
     * First function called after the controller is ran
     * here the stuff are initialized
     * 
     */
    function activate() {
      // console.log(">>> ge.left.sidenav.controller >>> activate ");
      if (!lodash.isEmpty($sessionStorage.getObject("projId").toString())) {
        var projId = $sessionStorage.getObject("projId").toString();
        var layerService = new VectorService();
        var reqParamData = {
          proj_id: projId,
          user_id: $sessionStorage.getObject("userId").toString(),
          fetch: 'allLayers'
        };
        layerService.getVectorLayers(reqParamData).then(function (result) {
          lodash.forEach(result, function (layer) {
            layer.layerName = "vertex_proj_id_" + projId + "_layer_id_" + layer.layer_id + "_latest";
            // load WFS layers from Geoserver
            loadWFSLayers(layer);
          });
        }, function (err) {
          console.log(err);
        });
      }

      // handle feature creation on map
      leafletData.getMap('leftMapViewer').then(function (map) {
        if (typeof vm.drawnItems !== "undefined") {
          // added this bloc of code for letting user get feature-info without entering edit-mode
          if (vm.drawnItems === null) {
            vm.drawnItems = new leaflet.FeatureGroup();
          }
          vm.drawnItems.on('click', onFeatureClicked);
          // vm.drawnItems.addTo(map);
          // map.addLayer(vm.drawnItems);
          // ----------------------
          if ($state.current.name === "app.vector") {
            map.on('draw:created', function (e) {
              var leafLayer = e.layer;
              // vm.drawnItems.addLayer(leafLayer);
              var drawsGeoJson = leafLayer.toGeoJSON();
              vm.editMode = "add";
              // openAttributePopUp(drawsGeoJson, vm.currentlyEditingLayer, vm.editMode, e);
              openAttributePopUp(leafLayer, vm.currentlyEditingLayer, vm.editMode, e);
            }.bind(vm.drawnItems));
            map.on('draw:editstart', function (e) {
              //  console.log(">>> draw:editstart ");
              vm.editMode = "edit-Geom";
              //  vm.drawnItems.off('click', onFeatureClicked);
            }.bind(vm.drawnItems));
            map.on('draw:editstop', function (e) {
              // console.log(">>> draw:editstop ");
              vm.editMode = null;
            }.bind(vm.drawnItems));
            map.on('draw:edited', function (e) {
              // console.log(">>> draw:edited ");
              var layers = e.layers;
              /* layers.eachLayer(function (layer) {
                  // console.log(layer);
                  // replace feature geom with the new editted geom value
                  layer.feature.geometry.coordinates = Object.values(layer.getLatLng());
                  $rootScope.$broadcast("addFeatureToUpdate", layer.feature);
              }); */
              $rootScope.$broadcast("geomUpdated", layers);
            });
            map.on('draw:deletestart', function (e) {
              // console.log(">>> draw:deletestart ");
              vm.editMode = "delete";
            }.bind(vm.drawnItems));
            map.on('draw:deletestop', function (e) {
              // console.log(">>> draw:deletestop ");
              vm.editMode = null;
            }.bind(vm.drawnItems));
            map.on('draw:deleted', function (e) {
              // console.log(">>> draw:deleted ");
              var layers = e.layers;
              prepareDeleteParams(layers);
            });
          }
        }
      });
    }

    function onFeatureClicked(e) {
      // console.log(">>> onFeatureClicked >>> ", e);
      if (!(vm.editMode === "edit-Geom" || vm.editMode === "delete")) {
        // expects only a single feature
        $rootScope.$broadcast("showFeatureAttr", e.layer.feature);
      }
    }

    function createLayer() {
      // console.log(">>> ge.left.sidenav.controller >>> createLayer");
      close();
      var config = {
        locals: {
          mapDialogInput: {
            // model: resource,
            removeFn: vm.remove
          }
        },
        controller: 'VectorLayerController',
        controllerAs: 'ctrl',
        templateUrl: Global.clientPath + '/vector/dialog/vectorLayer.html',
        hasBackdrop: false
      };

      C2Dialog.custom(config).then(function () {
        // reload the items from back-end
        // vm.search();
        // console.log("save done");
      });
    }

    function layerClicked(layer) {
      console.log(">>> vector.left.sidenav.controller >>> layerClicked ", layer);
      close();
      var config = {
        locals: {
          mapDialogInput: {
            model: layer
            // removeFn: vm.remove
            // mode: 'edit'
          }
        },
        controller: 'VectorLayerController',
        controllerAs: 'ctrl',
        templateUrl: Global.clientPath + '/vector/dialog/vectorLayer.html',
        hasBackdrop: false
      };

      C2Dialog.custom(config).then(function () {
        // reload the items from back-end
        // vm.search();
        // console.log("save done");
      });
    }

    /**
     * Activate Edit toolbar for particular layer
     * 
     * @param {any} layer 
     */
    function activateFeatureEdit(layer) {
      // console.log(">>> vector.left.sidenav.controller >>> activateFeatureEdit ", layer);

      leafletData.getMap('leftMapViewer').then(function (map) {
        if (vm.drawControl !== null) {
          vm.drawControl.remove();
          vm.drawControl = null;
          if (angular.isDefined(vm.drawnItems)) {
            vm.drawnItems = null;
          }
        }
        if (vm.drawControl === null) {
          // vm.drawnItems = new leaflet.FeatureGroup();
          // vm.drawnItems.on({
          //   'click': function (e) {
          //     // expects only a single feature
          //     $rootScope.$broadcast("showFeatureAttr", e.layer.feature);
          //   }
          // })
          // adding current layers features to drawnItems
          // lodash.forEach(layer.getLayers(), function(eachFeature) {
          //   // console.log(">>> eachFeature ", eachFeature);
          //   // eachFeature.editing.enable();
          //   eachFeature.addTo(vm.drawnItems);
          // });
          // vm.drawnItems.addTo(map);
          // map.addLayer(vm.drawnItems);
          // 
          vm.drawnItems = new leaflet.FeatureGroup();
          // adding current layers features to drawnItems
          lodash.forEach(layer.getLayers(), function (eachFeature) {
            // console.log(">>> eachFeature ", eachFeature);
            // eachFeature.editing.enable();
            // check is role is 3, if so than check if the feature's user is the same as logged in user
            if (eachFeature.feature.properties.layerName === layer.layerId) {
              // console.log("before adding to drawnitems ", eachFeature.feature);
              if ($sessionStorage.getObject("role").toString() === "3") {
                if (eachFeature.feature.properties.user_id === $sessionStorage.getObject("userId")) {
                  eachFeature.addTo(vm.drawnItems);
                  vm.drawnItems.addTo(map);
                }
              } else {
                eachFeature.addTo(vm.drawnItems);
                vm.drawnItems.addTo(map);
              }
            }
          });
          vm.drawControl = new leaflet.Control.Draw({
            draw: {
              polygon: true,
              polyline: true,
              rectangle: false,
              circle: false,
              marker: true,
              circlemarker: false
            },
            edit: {
              featureGroup: vm.drawnItems
            },
            position: 'topright'
          });
          map.addControl(vm.drawControl);
        }
        // set the currently editing layer
        vm.currentlyEditingLayer = layer;
        $rootScope.$broadcast("setCurrentEditLayer", { data: { layer: vm.currentlyEditingLayer } });
        close();
      });
    }

    function addNonGroupLayers(sourceLayer, targetGroup) {
      if (sourceLayer instanceof L.LayerGroup) {
        sourceLayer.eachLayer(function (layer) {
          addNonGroupLayers(layer, targetGroup);
        });
      } else {
        targetGroup.addLayer(sourceLayer);
      }
    }

    /**
     * Removes the layer from map and deletes it from our collection
     * 
     * @param {any} layer 
     */
    function deleteLayer(layer) {
      // console.log(">>> vector.left.sidenav.controller >>> deleteLayer ", layer);
      // check for draw control
      // if(vm.drawControl !== null) {
      //   vm.drawControl.remove();
      //   vm.drawControl = null;
      //   if(angular.isDefined(vm.drawnItems)) {
      //     console.log("vm.drawnItems = ", vm.drawnItems);
      //     vm.drawnItems = null;
      //   }
      // }

      // // clean features from map i.e remove layer from map
      // leafletData.getMap('leftMapViewer').then(function (map) {
      //   map.removeLayer(layer);
      // });

      // vm.leafletLayers = lodash.reject(vm.leafletLayers, function(layerToDelete) { 
      //   if(leaflet.stamp(layerToDelete) === leaflet.stamp(layer)) {
      //     return true;
      //   }
      // });
      // console.log("After deleteing ", vm.leafletLayers);

      var confirm = $mdDialog.confirm().title($translate.instant('messages.deleteLayerTitle')).textContent($translate.instant('messages.deleteLayerMessage')).ariaLabel('Lucky day')
      // .targetEvent(ev)
      .ok($translate.instant('messages.yes')).cancel($translate.instant('messages.no'));

      $mdDialog.show(confirm).then(function () {
        // $scope.status = 'You decided to get rid of your debt.';
        var reqParam = {
          "action": "deleteLayers",
          "data": [{
            "layer_id": layer.layerId,
            "user_id": sessionStorage.getItem("userId"),
            "proj_id": sessionStorage.getItem("projId")
          }]
        };
        // call delete API and state.reload
        var vectorService = new VectorService();
        vectorService.deleteVectorLayer(reqParam).then(function (res) {
          if (res === "success") {
            $state.reload();
            C2Toast.success($translate.instant('messages.operationSuccess'));
          } else {
            C2Toast.success($translate.instant('messages.operationError'));
          }
        }, function (err) {
          console.log("Error while deleting ", err);
        });
      }, function () {
        // console.log("Deleting Layer Cancelled");
      });
    }

    /**
     * Accepts array of layer names and fires WFS calls to load them as WFS layer
     * Generates an array of layer list "leafletLayers" which maintains a list of layers added to map
     * 
     * @param [{any}] layers 
     */
    function loadWFSLayers(layer) {
      // console.log(">>> vector.left.sidenav.controller >>> loadWFSLayers ", layer);
      // lodash.forEach(layers, function(layer) {
      // console.log("calling geoserver for layer = ", layer);
      leafletData.getMap('leftMapViewer').then(function (map) {
        // MapLayerService.addWFSLayer(layer.layerName, 'leftMapViewer');
        // create layer objects and keep it in vm.layers list 
        var tempLayer = new leaflet.WFST({
          // url: 'https://demo.geo-solutions.it:443/geoserver/ows',
          // typeNS: 'tiger',
          // typeName: 'tiger_roads',
          url: 'http://0.0.0.0:8081/geoserver/ows',
          typeNS: 'vector',
          typeName: layer.layerName,
          // crs: leaflet.CRS.EPSG4326,
          geometryField: 'the_geom',
          style: {
            color: "#" + ((1 << 24) * Math.random() | 0).toString(16)
            // weight: 1,
          },
          fillOpacity: 0.2
        }, new leaflet.Format.GeoJSON({
          crs: leaflet.CRS.EPSG4326 /* ,
                                    pointToLayer(geoJsonPoint, latlng) {
                                    const layer = new L.CircleMarker(latlng, {
                                    radius: 10,
                                    });
                                    return layer;
                                    }, */
        })).addTo(map).on('load', function () {
          // map.fitBounds(tempLayer.getLayers()[0].getBounds());
          if (tempLayer.getBounds().isValid()) {
            map.fitBounds(tempLayer.getBounds());
          }
          tempLayer.visible = true;
          tempLayer.layerName = "vertex_proj_id_" + sessionStorage.getItem("projId") + "_layer_id_" + layer.layer_id + "_latest";
          tempLayer.title = layer.title;
          tempLayer.layerId = layer.layer_id;
          tempLayer.desc = layer.description;
          // store in my collection to be used 
          vm.leafletLayers.push(tempLayer);

          lodash.forEach(tempLayer.getLayers(), function (eachFeature) {
            // console.log(">>> eachFeature ", eachFeature, layer.layer_id);
            eachFeature.feature.properties.layerName = layer.layer_id;
            eachFeature.addTo(vm.drawnItems);
          });
        });
      });
      // });
    }

    function openAttributePopUp(featureGeojson, layer, mode, ev) {
      // console.log(">>> vector.left.sidenav.controller >>> openAttributePopUp ", featureGeojson, layer);
      $rootScope.$broadcast("openRightNav", /* FeatureService.createObjectFromGeoJson(layer.feature) */
      { data: {
          layer: layer,
          layerId: layer.layerId,
          feature: featureGeojson,
          operation: "create"
        }
      });
    }

    /**
     * Changes the visibilty of a layer
     * 
     * @param {any} layer 
     */
    function layerVisibility(layer) {
      // console.log(">>> layerVisibility ", layer, layer.visible);
      leafletData.getMap('leftMapViewer').then(function (map) {
        // console.log(">>> layerVisibility >>> ", map);
        if (layer.visible) {
          map.addLayer(layer);
        } else {
          map.removeLayer(layer);
        }
      });
    }

    function prepareDeleteParams(features) {

      $rootScope.$broadcast("featureDeleted", { data: {
          features: features,
          operation: "delete"
        }
      });
    }

    function getLayerByName(layerName) {
      console.log(">>> getLayerByName >>> ", layerName);
      leafletData.getMap('leftMapViewer').then(function (map) {
        map.eachLayer(function (layer) {
          console.log("each layer = ", layer);
        });
      });
    }

    /**
     * Close this sidenav
     * 
     */
    function close() {
      $mdSidenav('left').close();
    }

    /**
     * Open this sidenav
     * 
     */
    function open() {
      $mdSidenav('left').open();
    }

    /**
     * Main function which send the Modifications to server
     * 
     */
    function save() {
      // console.log(">>> VectorLeftSidenavController >>> save ");
      var reqParam = {
        "action": "createFeatures",
        "user_id": $sessionStorage.getObject("userId"),
        "proj_id": $sessionStorage.getObject("projId"),
        "role": $sessionStorage.getObject("role"),
        "data": []
      };
      var createParam = {
        "action": "create",
        "data": []
      };
      var editParam = {
        "action": "edit",
        "data": []
      };
      var deleteParam = {
        "action": "delete",
        "data": []
      };
      if (angular.equals($sessionStorage.getObject("createParam"), {})) {
        reqParam.data.push(createParam);
      } else {
        reqParam.data.push($sessionStorage.getObject("createParam"));
      }
      if (angular.equals($sessionStorage.getObject("editParam"), {})) {
        reqParam.data.push(editParam);
      } else {
        reqParam.data.push($sessionStorage.getObject("editParam"));
      }
      if (angular.equals($sessionStorage.getObject("deleteParam"), {})) {
        reqParam.data.push(deleteParam);
      } else {
        reqParam.data.push($sessionStorage.getObject("deleteParam"));
      }
      // console.log("reqParam = ", reqParam);

      var layerService = new VectorService();
      layerService.createFeatures(reqParam).then(function (result) {
        // console.log("saved in API ", result);
        if (result === "success") {
          C2Toast.success($translate.instant('messages.saveSuccess'));
          // console.log("saved in API ", result);
          $sessionStorage.remove("createParam");
          $sessionStorage.remove("editParam");
          $sessionStorage.remove("deleteParam");
          $state.reload();
        } else {
          C2Toast.error($translate.instant('messages.saveError'));
        }
      }, function (err) {
        console.log("Error while saving ", err);
        $sessionStorage.remove("createParam");
        $sessionStorage.remove("editParam");
        $sessionStorage.remove("deleteParam");
      });
    }

    /**
     * Open/close the left side nav
     * 
     */
    function toggleLeft() {
      $mdSidenav('left').toggle();
    }

    /**
     * Export layer data as GeoJSON in a file
     * 
     */
    function exportLayer(layer) {
      // console.log(">>> leftSideNav >>> exportLayer ", layer);
      // $window.open("/heimap/vector?proj_id="+
      //   $sessionStorage.getObject("projId") +
      //   "&layer_id="+ layer.layerId +"&fetch=latestVersion",
      //   "_blank");

      var reqParam = {
        // "user_id": $sessionStorage.getObject("userId"),
        "layer_id": layer.layerId,
        "proj_id": $sessionStorage.getObject("projId"),
        "fetch": "latestVersion"
      };

      var layerService = new VectorService();
      layerService.exportLayerGeoJson(reqParam).then(function (result) {
        // console.log("exportLayerGeoJson ", result);
        var layerData = "data:application/octet-stream;charset=utf-8," + encodeURIComponent(JSON.stringify(result));
        var downloadAnchorNode = document.createElement('a');
        downloadAnchorNode.setAttribute("href", layerData);
        downloadAnchorNode.setAttribute("download", "layer.json");
        document.body.appendChild(downloadAnchorNode); // required for firefox
        downloadAnchorNode.click();
        downloadAnchorNode.remove();
      }, function (err) {
        console.log("Error while saving ", err);
      });
    }

    /**
     * Check functionality is allowed for a user based on his role
     * 
     * @returns boolean
     */
    function userAllow(functionality) {
      if (functionality === "featureEdit") {
        if (sessionStorage.getItem("role").toString() === "1") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "2") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "3") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "4") {
          return false;
        }
      }
      if (functionality === "layerCreate") {
        if (sessionStorage.getItem("role").toString() === "1") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "2") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "3") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "4") {
          return false;
        }
      }
      if (functionality === "layerEdit") {
        if (sessionStorage.getItem("role").toString() === "1") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "2") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "3") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "4") {
          return false;
        }
      }
      if (functionality === "layerDelete") {
        if (sessionStorage.getItem("role").toString() === "1") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "2") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "3") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "4") {
          return false;
        }
      }
      if (functionality === "layerExport") {
        if (sessionStorage.getItem("role").toString() === "1") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "2") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "3") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "4") {
          return false;
        }
      }
      if (functionality === "publishData") {
        if (sessionStorage.getItem("role").toString() === "1") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "2") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "3") {
          return true;
        } else if (sessionStorage.getItem("role").toString() === "4") {
          return false;
        }
      }
    }

    activate();
  }
})();
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {

  'use strict';

  VectorRightSidenavController.$inject = ["$mdSidenav", "lodash", "$rootScope", "leaflet", "leafletData", "FeatureService", "$sessionStorage", "VectorService", "MapLayerService"];
  angular.module('app').controller('VectorRightSidenavController', VectorRightSidenavController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function VectorRightSidenavController($mdSidenav, lodash, $rootScope, leaflet, leafletData, FeatureService, $sessionStorage, VectorService, MapLayerService) {
    var vm = this;

    vm.showAttributes = showAttributes;
    vm.update = update;
    vm.close = close;
    vm.open = open;
    vm.showAllFeatureVersions = showAllFeatureVersions;
    vm.toggleRight = toggleRight;
    vm.checkDependentValue = checkDependentValue;
    vm.getFormAttribute = getFormAttribute;
    vm.featureAttr = null;
    vm.gazzTypes = ["Physical Thing", "Event", "Place"];
    vm.editMode = null; // "edit", "create", "delete"
    vm.currentLayer = null;
    vm.createParam = {
      "action": "create",
      "data": []
    };
    vm.editParam = {
      "action": "edit",
      "data": []
    };
    vm.deleteParam = {
      "action": "delete",
      "data": []
    };
    vm.disableSave = false;
    vm.showAllVersions = true;
    vm.formParams = null;

    // used for Edit feature call (attribute update)
    $rootScope.$on('showFeatureAttr', function (event, args) {
      // console.log(">>> VectorRightSidenavController >>> showFeatureAttr ", args);
      vm.featureAttr = null;
      // close and open to let the divs refresh
      close();
      vm.editMode = "edit";
      vm.currentFeature = args;
      args = FeatureService.createObjectFromGeoJson(args);
      // check whether feature already exist in vm.editParam
      if (vm.editParam.data.length > 0) {
        var tempObj = searchFromCollectionToFeature(args, vm.editParam);
        if (tempObj !== null) {
          tempObj.type_crm = vm.currentFeature.properties.type_crm;
          args = tempObj;
        }
      }
      showAttributes(args);
      open();
      if (vm.currentLayer !== null) {
        if (vm.currentLayer.layerId === vm.currentFeature.properties.layerName) {
          // check for user's access on this feature
          // console.log(checkUserAccessOnFeature(vm.currentFeature, $sessionStorage.getObject("userId").toString()));
          if (checkUserAccessOnFeature(vm.currentFeature, $sessionStorage.getObject("userId").toString())) {
            vm.disableSave = false;
          } else {
            vm.disableSave = true;
          }
        } else {
          vm.disableSave = true;
        }
      } else {
        vm.disableSave = true;
      }
      vm.showAllVersions = true;
    });

    // geom update
    $rootScope.$on('geomUpdated', function (event, args) {
      // console.log(">>> VectorRightSidenavController >>> addFeatureToUpdate ", args);
      args.eachLayer(function (layer) {
        // console.log(layer);
        // replace feature geom with the new editted geom value
        // layer.feature.geometry.coordinates = Object.values(layer.getLatLng());
        layer.feature.geometry = layer.toGeoJSON().geometry;
        vm.currentFeature = layer.feature;
        // addFeatureToUpdateList(layer.feature);
        // ------
        if (vm.createParam.data.length > 0) {
          // find editted feature in editParam 
          var foundObjectInCreateParam = lodash.find(vm.createParam.data, function (eachFeature) {
            return parseInt(layer.feature.properties.type_crm) === eachFeature.type_crm || layer.feature.properties.type_crm === eachFeature.type_crm;
          });
          if (typeof foundObjectInCreateParam !== "undefined") {
            // console.log("found in createParam ", foundObjectInCreateParam);
            searchAndReplaceOnlyGeom(layer.feature, vm.createParam);
            // addFeatureToUpdateList(layer.feature);
            // fire back to left sidenav to add newly added feature to its layer
            // $rootScope.$broadcast("addFeatureToLayer", vm.currentFeature);
            $sessionStorage.setObject("createParam", vm.createParam);
          } else {
            // handleEditParam(vm.featureAttr, vm.editParam, vm.currentFeature);
            addFeatureToUpdateList(layer.feature);
            $sessionStorage.setObject("editParam", vm.editParam);
          }
        } else {
          // handleEditParam(vm.featureAttr, vm.editParam, vm.currentFeature);
          addFeatureToUpdateList(layer.feature);
          $sessionStorage.setObject("editParam", vm.editParam);
        }
      });
    });

    // used for create feature call
    $rootScope.$on('openRightNav', function (event, args) {
      // console.log(">>> VectorRightSidenavController >>> openRightNav ", args);
      vm.featureAttr = null;
      close();
      vm.editMode = args.data.operation;
      vm.currentLayer = args.data.layer;
      vm.currentLeafFeature = args.data.feature;
      vm.currentFeature = args.data.feature.toGeoJSON();
      vm.disableSave = false;
      open();
    });

    // used for delete feature call
    $rootScope.$on('featureDeleted', function (event, args) {
      // console.log(">>> VectorRightSidenavController >>> featureDeleted ", args);
      var layers = args.data.features;
      layers.eachLayer(function (layer) {
        // check for it exist in create or edit collection
        if (searchInCollection(vm.createParam, layer) === false && searchInCollection(vm.editParam, layer) === false) {
          var tempDeleteData = {
            "layer_id": vm.currentLayer.layerId,
            "type_crm": layer.feature.properties.type_crm
          };
          vm.deleteParam.data.push(tempDeleteData);
        } else {
          if (searchInCollection(vm.createParam, layer)) {
            // delete it from that collection
            deleteFeatureFromCollection(layer, vm.createParam);
            // console.log("vm.createParam = ", vm.createParam);
            $sessionStorage.setObject("createParam", vm.createParam);
          }
          if (searchInCollection(vm.editParam, layer)) {
            // console.log(">>> got a feature in collection");
            // delete it from that collection
            deleteFeatureFromCollection(layer, vm.editParam);
            // console.log("vm.editParam = ", vm.editParam);
            $sessionStorage.setObject("editParam", vm.editParam);
            // since a edited feature is deleted that means its a simple delete
            var tempDeleteData = {
              "layer_id": vm.currentLayer.layerId,
              "type_crm": layer.feature.properties.type_crm
            };
            vm.deleteParam.data.push(tempDeleteData);
          }
        }
      });
      // console.log("vm.deleteParam = ", vm.deleteParam);
      $sessionStorage.setObject("deleteParam", vm.deleteParam);
    });

    // Assign current Editing layer
    $rootScope.$on('setCurrentEditLayer', function (event, args) {
      // console.log(">>> VectorRightSidenavController >>> setCurrentEditLayer ", args);
      vm.currentLayer = args.data.layer;
    });

    /**
     * First function called after the controller is ran
     * here the stuff are initialized
     * 
     */
    function activate() {}
    // console.log(">>> vector.right.sidenav.controller >>> activate ", vm);


    /**
     * Close this sidenav
     * 
     */
    function close() {
      $mdSidenav('right').close();
      vm.editMode = null;
      vm.currentFeature = null;
    }

    /**
     * Open this sidenav
     * 
     */
    function open() {
      $mdSidenav('right').open();
    }

    /**
     * Displays feature's attribute in right-side-nav. Called from event broadcast from 
     * vector.left.sidenav.controller
     * 
     */
    function showAttributes(featureObject) {
      // console.log(">>> VectorRightSidenavController >>> showFeatureAttr() ", featureObject);
      // check if any value contains [] for attribute types like "Language" where values will be an array
      var tempFValObj = Object.values(featureObject);
      var tempFKeyObj = Object.keys(featureObject);
      for (var i = 0; i < tempFValObj.length; i++) {
        if (typeof tempFValObj[i] === "string") {
          if (tempFValObj[i].indexOf("[") !== -1) {
            featureObject[tempFKeyObj[i]] = JSON.parse(tempFValObj[i]);
          }
        }
      }

      vm.featureAttr = featureObject;
      getFormAttribute();
    }

    /**
     * Called when geom update is performed on feature. Expects 1 feature at a time. 
     * Hence called in loop from the caller. 
     * Checks for Edit + Edit scenarios, mentioned in Test cases of #225.
     * Doesn't returns anything but updates the vm.editParam
     * 
     * @param {any} feature
     */
    function addFeatureToUpdateList(feature) {
      // console.log(">>> VectorRightSidenavController >>> addFeatureToUpdateList ", feature);
      if (vm.editParam.data.length > 0) {
        // find editted feature in editParam 
        var foundObjectInEditParam = lodash.find(vm.editParam.data, function (eachFeature) {
          return parseInt(feature.properties.type_crm) === eachFeature.type_crm || feature.properties.type_crm === eachFeature.type_crm;
        });
        // if found than replace it in ediParam else its a new feature push to editParam
        // console.log("foundObjectInEditParam = ", foundObjectInEditParam);
        if (typeof foundObjectInEditParam !== "undefined") {
          // searchAndReplace(feature, vm.editParam);
          // lodash.remove(vm.editParam.data, function(eachFeature){
          //   return (parseInt(feature.type_crm) === eachFeature.type_crm || 
          //   feature.type_crm === eachFeature.type_crm) 
          // });
          searchAndReplaceOnlyGeom(feature, vm.editParam);
        } else {
          var tempFeature = {
            "layer_id": vm.currentLayer.layerId,
            "key_cidoc_array": feature.properties.key_cidoc_array.split("|"),
            "value_gazetteer_array": feature.properties.value_gazetteer_array.split("|"),
            "type_crm": feature.properties.type_crm
          };
          tempFeature.key_cidoc_array.push("geom");
          tempFeature.value_gazetteer_array.push(feature.geometry);
          vm.editParam.data.push(tempFeature);
        }
      } else {
        var tempFeature = {
          "layer_id": vm.currentLayer.layerId,
          "key_cidoc_array": feature.properties.key_cidoc_array.split("|"),
          "value_gazetteer_array": feature.properties.value_gazetteer_array.split("|"),
          "type_crm": feature.properties.type_crm
        };
        tempFeature.key_cidoc_array.push("geom");
        tempFeature.value_gazetteer_array.push(feature.geometry);
        vm.editParam.data.push(tempFeature);
      }
      // console.log("vm.editParam = ", vm.editParam);
      $sessionStorage.setObject("editParam", vm.editParam);
    }

    /**
     * Save function. Called when Save button in right-saide-nav is clicked, updated vm.createParam
     * and vm.editParam.
     * Not for Delete features, since this handles majorly only for Attribute Save/Update
     * 
     */
    function update() {
      // console.log(">>> VectorRightSidenavController >>> update >>> ", vm.editMode, vm.currentLayer, vm.featureAttr, vm.currentFeature);
      if (vm.editMode === "create") {
        // vm.featureAttr.type_crm = "crm_" + Math.floor(Math.random() * (9999 - 1 + 1)) + 1;
        var tempCrm = "crm_" + Math.floor(Math.random() * (9999 - 1 + 1)) + 1;
        var apiParamFormat = convertJsonToApiReqObj(vm.featureAttr, vm.currentFeature);
        var tempFeature = {
          "layer_id": vm.currentLayer.layerId,
          "key_cidoc_array": apiParamFormat.keys,
          "value_gazetteer_array": apiParamFormat.values,
          "type_crm": tempCrm
        };
        vm.createParam.data.push(tempFeature);
        // create the vm.currentFeature in same style as we receive it from wfs layer call
        // vm.currentFeature.properties = vm.featureAttr;
        vm.currentFeature.properties = {
          "key_cidoc_array": convertToSSV(apiParamFormat.keys),
          "value_gazetteer_array": convertToSSV(apiParamFormat.values),
          "type_crm": tempCrm
        };
        vm.currentLeafFeature.feature = vm.currentFeature;
        // console.log("vm.currentLeafFeature = ", vm.currentLeafFeature);
        // fire back to left sidenav to add newly added feature to its layer
        $rootScope.$broadcast("addFeatureToLayer", vm.currentLeafFeature);
        $sessionStorage.setObject("createParam", vm.createParam);
      } else if (vm.editMode === "edit") {
        // check if current feature already exist in vm.createParam
        if (vm.createParam.data.length > 0) {
          // find editted feature in editParam 
          var foundObjectInCreateParam = lodash.find(vm.createParam.data, function (eachFeature) {
            return parseInt(vm.featureAttr.type_crm) === eachFeature.type_crm || vm.featureAttr.type_crm === eachFeature.type_crm;
          });
          if (typeof foundObjectInCreateParam !== "undefined") {
            // console.log("found in createParam ", foundObjectInCreateParam);
            searchAndReplace(vm.featureAttr, vm.createParam);
            var apiParamFormat = convertJsonToApiReqObj(vm.featureAttr, vm.currentFeature);
            vm.currentFeature.properties = {
              "key_cidoc_array": convertToSSV(apiParamFormat.keys),
              "value_gazetteer_array": convertToSSV(apiParamFormat.values),
              "type_crm": vm.featureAttr.type_crm
            };
            vm.currentLeafFeature.feature = vm.currentFeature;
            // fire back to left sidenav to add newly added feature to its layer
            $rootScope.$broadcast("addFeatureToLayer", vm.currentLeafFeature);
            $sessionStorage.setObject("createParam", vm.createParam);
          } else {
            handleEditParam(vm.featureAttr, vm.editParam, vm.currentFeature);
            // console.log("vm.editParam = ", vm.editParam);
            $sessionStorage.setObject("editParam", vm.editParam);
          }
        } else {
          handleEditParam(vm.featureAttr, vm.editParam, vm.currentFeature);
          // console.log("vm.editParam = ", vm.editParam);
          $sessionStorage.setObject("editParam", vm.editParam);
        }
      }

      toggleSaveButton();
    }

    /**
     * Handles Edit + Edit operations on Right Save click
     * 
     * @param {any} featureAttr feature's attributes which are displayed in right sidenav
     * @param {any} editParamCollection Edit collection  
     * @param {any} currentFeature 
     * 
     */
    function handleEditParam(featureAttr, editParamCollection, currentFeature) {
      // check is current feature already exist in editParamCollection due to geom edit
      if (editParamCollection.data.length > 0) {
        // find editted feature in editParam 
        var foundObjectInEditParam = lodash.find(editParamCollection.data, function (eachFeature) {
          return parseInt(featureAttr.type_crm) === eachFeature.type_crm || featureAttr.type_crm === eachFeature.type_crm;
        });
        // if found than replace it in ediParam else its a new feature push to editParam
        if (typeof foundObjectInEditParam !== "undefined") {
          searchAndReplace(featureAttr, editParamCollection);
        } else {
          var tempFeature = {
            "layer_id": vm.currentLayer.layerId,
            "type_crm": parseInt(featureAttr.type_crm),
            "key_cidoc_array": Object.keys(featureAttr),
            "value_gazetteer_array": Object.values(featureAttr)
          };
          editParamCollection.data.push(tempFeature);
          currentFeature.properties.key_cidoc_array = Object.keys(featureAttr).toString();
          currentFeature.properties.value_gazetteer_array = Object.values(featureAttr).toString();
        }
      } else {
        var tempFeatureAttr = FeatureService.tearObject(featureAttr);
        var tempFeature = {
          "layer_id": vm.currentLayer.layerId,
          "type_crm": parseInt(featureAttr.type_crm),
          "key_cidoc_array": tempFeatureAttr.keys,
          "value_gazetteer_array": tempFeatureAttr.values
        };
        editParamCollection.data.push(tempFeature);
        currentFeature.properties.key_cidoc_array = Object.keys(featureAttr).toString();
        currentFeature.properties.value_gazetteer_array = Object.values(featureAttr).toString();
      }
    }

    /**
     * Since our API requires the data in a particular format. This funcion converts key: value 
     * combination to all keys together and all values together. Also adds geometry to 
     * that key and value style object
     * 
     * @param {any} attributes feature's attributes which are displayed in right sidenav
     * @param {any} feature 
     * 
     */
    function convertJsonToApiReqObj(attributes, feature) {
      // console.log(">>> convertJsonToApiReqObj >>> ", attributes, feature);
      for (var eachAttr in attributes) {
        if (Array.isArray(attributes[eachAttr])) {
          // eachAttr = eachAttr.toString();
          attributes[eachAttr] = JSON.stringify(attributes[eachAttr]);
          // console.log("attributes[eachAttr] = ", attributes[eachAttr]);
        }
      }
      var keys = Object.keys(attributes);
      var values = Object.values(attributes);

      // console.log(">>> convertJsonToApiReqObj >>> ", values);
      keys.push("geom");
      values.push(feature.geometry);
      return {
        "keys": keys,
        "values": values
      };
    }

    /**
     * Search for the feature in collection using 'type_crm' in feature to match with 'type_crm' 
     * in collection. Handles Edit + Edit operation
     * 
     * @param {any} feature 
     * @param {collection} collection
     * 
     * @returns collection modified collection
     */
    function searchAndReplace(feature, collection) {
      var returnData = [];
      var tempCollection = collection.data;
      lodash.forEach(tempCollection, function (eachFeature) {
        if (parseInt(feature.type_crm) === eachFeature.type_crm || feature.type_crm === eachFeature.type_crm) {
          feature = FeatureService.tearObject(feature);
          eachFeature.key_cidoc_array = feature.keys;
          eachFeature.value_gazetteer_array = feature.values;
        }
      });
      return returnData;
    }

    /**
     * Search for the feature in collection using 'type_crm' in feature to match with 'type_crm' 
     * in collection. Handles Edit + Edit operation
     * 
     * @param {any} feature 
     * @param {collection} collection
     * 
     * @returns collection modified collection
     */
    function searchFromCollectionToFeature(feature, collection) {
      var returnData = null;
      var tempCollection = collection.data;
      lodash.forEach(tempCollection, function (eachFeature) {
        if (feature.type_crm === eachFeature.type_crm) {
          eachFeature = FeatureService.stitchObject(eachFeature.key_cidoc_array, eachFeature.value_gazetteer_array);
          returnData = eachFeature;
        }
      });
      // console.log("searchFromCollectionToFeature >>> returnData = ", returnData);
      return returnData;
    }

    /**
     * Search for the feature in collection using 'type_crm' in feature to match with 'type_crm' 
     * in collection. and replace the Feature's geometry in Collection  with feature' geometry
     * Basically used in Add/Edit + Edit (geom) operation
     * 
     * @param {any} feature 
     * @param {collection} collection
     * 
     * @returns collection modified collection
     */
    function searchAndReplaceOnlyGeom(feature, collection) {
      var tempCollection = collection.data;
      lodash.forEach(tempCollection, function (eachFeature) {
        if (parseInt(feature.properties.type_crm) === eachFeature.type_crm || feature.properties.type_crm === eachFeature.type_crm) {
          eachFeature.value_gazetteer_array[eachFeature.key_cidoc_array.indexOf("geom")] = feature.geometry;
        }
      });
    }

    /**
     * Searches for a feature in a collection given. Returns true if found else false
     * 
     * @param {any} feature 
     * @param {collection} collection
     * 
     * @returns boolean
     */
    function searchInCollection(collection, layer) {
      // console.log("searchInCollection >>> ", collection, layer);
      var tempReturn = lodash.find(collection.data, function (eachFeature) {
        return parseInt(layer.feature.properties.type_crm) === eachFeature.type_crm || layer.feature.properties.type_crm === eachFeature.type_crm;
      });
      if (typeof tempReturn !== "undefined") {
        return true;
      } else {
        return false;
      }
    }

    /**
     * Deletes a feature from a collection given. Returns new collection
     * 
     * @param {any} feature 
     * @param {collection} collection
     * 
     * @returns collection
     */
    function deleteFeatureFromCollection(layer, collection) {
      return lodash.remove(collection.data, function (eachFeature) {
        return parseInt(layer.feature.properties.type_crm) === eachFeature.type_crm || layer.feature.properties.type_crm === eachFeature.type_crm;
      });
    }

    /**
     * Disables the Save button from accidental updates
     * Enables back when feature is clicked on map
     * 
     */
    function toggleSaveButton() {
      vm.disableSave = true;
    }

    /**
     * Calls the API for getting all versions of a particular feature
     * uses vm.currentFeature, vm.currentLayer
     * 
     */
    function showAllFeatureVersions() {
      // console.log(">>> >>> showAllFeatureVersions >>> ", vm.currentFeature, vm.currentLayer);
      MapLayerService.removeAllMapLayers('rightMapViewer');
      // call getAllFeatureVersion
      var reqParamData = {
        proj_id: $sessionStorage.getObject("projId").toString(),
        layer_id: vm.currentLayer.layerId,
        type_crm: vm.currentFeature.properties.type_crm,
        fetch: 'allVersions'
      };
      var layerService = new VectorService();
      layerService.getAllFeatureVersion(reqParamData).then(function (res) {
        if (res.length > 0) {
          showFeatureOnMap(res);
        }
      }, function (err) {
        console.log(err);
      });
    }

    /**
     * Shows / renders all versions of a particular feature on right map
     * Associates click event to each feature to show attributes on click
     * 
     * @param [{any}] features
     */
    function showFeatureOnMap(features) {

      if (angular.isDefined(vm.rightMapLayerGroup)) {
        vm.rightMapLayerGroup.clearLayers();
      }
      vm.rightMapLayerGroup = new leaflet.LayerGroup();

      leafletData.getMap('rightMapViewer').then(function (map) {
        lodash.forEach(features, function (feature) {
          feature.type_crm = vm.currentFeature.properties.type_crm + "_" + Math.floor(Math.random() * (9999 - 1 + 1)) + 1;
          var fgeom = JSON.parse(feature.geom);
          delete feature.geom;

          var geojsonFeature = {
            "type": "Feature",
            "properties": feature,
            "geometry": fgeom
          };
          // console.log("geojsonFeature = ", geojsonFeature);
          // vm.rightMapLayerGroup = leaflet.geoJSON(geojsonFeature, {
          //   onEachFeature: onEachFeature
          // }).addTo(map);
          leaflet.geoJSON(geojsonFeature, {
            onEachFeature: onEachFeature
          }).addTo(vm.rightMapLayerGroup);
        });
        vm.rightMapLayerGroup.addTo(map);
      });

      // inner fucntion used for binding click event to each feature
      function onEachFeature(feature, layer) {
        layer.on({
          'click': function click(e) {
            close();
            showAttributes(feature.properties);
            vm.disableSave = true;
            vm.showAllVersions = false;
            open();
          }
        });
      }
    }

    /**
     * Open/close the right side nav
     * 
     */
    function toggleRight() {
      $mdSidenav('right').toggle();
    }

    /**
     * Called when Feature Type Dropdown is changed. Gets attributes (only key)of the feature
     * to generate the Attribute form
     * 
     * @param {string} vm.featureAttr.feature dropdown selected value
     */
    function getFormAttribute() {
      // console.log("getFormAttribute ", vm.featureAttr.feature);
      // call API for vm.featureAttr.feature
      var featureType = vm.featureAttr.feature;
      if (featureType.indexOf(" ") !== -1) {
        featureType = featureType.replace(/\s/g, '');
      }
      var reqParamData = { type: featureType };
      var vectorService = new VectorService();
      vectorService.getFormData(reqParamData).then(function (res) {
        // console.log("response ", res);
        vm.formParams = res;
      }, function (err) {
        console.log(err);
      });
    }

    /**
     * Checks whether a field is dependent on other fields. Used for Dynamic form 
     * 
     * @param {string} field
     */
    function checkDependentValue(field) {
      // vm.formParams
      // featureAttr[field.name]
      if (vm.featureAttr !== null) {
        // console.log(field.name, " - ", field.dependent); 
        if (field.name !== field.dependent) {
          if (angular.isDefined(vm.featureAttr[field.dependent])) {
            // if(vm.featureAttr[field.dependent] !== "") {
            if (vm.featureAttr[field.dependent].length !== 0) {
              // console.log(">>> >>> checkDependentValue ", field, field.dependent, vm.featureAttr[field.dependent]);
              // field.required = true;
              // close();
              // open();
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
      }
    }

    /**
     * Converts comma sperated values to semi-colon seperated values
     * 
     * @param {*} csvString 
     */
    function convertToSSV(csvString) {
      // console.log("csvString = ", csvString);
      var resultString = "";
      for (var i = 0; i < csvString.length; i++) {
        if (_typeof(csvString[i]) !== "object" && typeof csvString[i] !== "string") {
          if (csvString[i].indexOf("[") !== -1) {
            if (resultString == "") {
              resultString = csvString[i];
            } else {
              resultString = resultString + ";" + csvString[i];
            }
          }
        } else {
          if (resultString == "") {
            resultString = csvString[i];
          } else {
            resultString = resultString + ";" + csvString[i];
          }
        }
      }
      // return csvString.replace(/,/g, ";");
      return resultString;
    }

    /**
     * Checks the user based on his role whether he/she is allowed access on the feature 
     * 
     * @param {object} feature
     * @param {object} user currently logged in user
     */
    function checkUserAccessOnFeature(feature, user) {
      // console.log(">>> checkUserAccessOnFeature >>> ", feature, user);
      // admin
      if ($sessionStorage.getObject("role").toString() === "1") {
        return true;
      }
      // senior user
      if ($sessionStorage.getObject("role").toString() === "2") {
        return true;
      }
      // user
      if ($sessionStorage.getObject("role").toString() === "3") {
        if (feature.properties.user_id === user) {
          return true;
        } else {
          return false;
        }
      }
      // guest user
      if ($sessionStorage.getObject("role").toString() === "4") {
        return false;
      }
    }

    activate();
  }
})();
'use strict';

(function () {

  'use strict';

  MapBottomNavController.$inject = ["$controller", "MapService", "lodash", "$mdSidenav", "$rootScope", "MapLayerService", "C2Dialog", "$translate", "MapViewerService", "$state"];
  angular.module('app').controller('MapBottomNavController', MapBottomNavController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function MapBottomNavController($controller, MapService, lodash, $mdSidenav, $rootScope, MapLayerService, C2Dialog, $translate, MapViewerService, $state) {

    var vm = this;
    vm.afterSearch = afterSearch;
    vm.toggleBottom = toggleBottom;
    vm.applyFilters = applyFilters;
    vm.toggleIncludeToWorkingList = toggleIncludeToWorkingList;
    vm.isLoaded = isLoaded;
    vm.onActivate = onActivate;
    vm.showLoadMapInLeftButton = showLoadMapInLeftButton;
    vm.showLoadMapInRightButton = showLoadMapInRightButton;
    vm.loadGcpOnMap = loadGcpOnMap;
    vm.isNonGeorefLoaded = isNonGeorefLoaded;
    vm.showFilterCheckbox = false;
    vm.showOnlyChildMap = false;
    vm.showOnlyChildMapFunc = showOnlyChildMapFunc;
    vm.isChildMap = isChildMap;

    /**
     * Execute the action when this controller is activated
     * 
     */
    function onActivate() {
      vm.showBottomNav = false;
      vm.showLoadMapInRight = MapViewerService.getOption('rightMapViewer', 'showLoadMapInRight', true);
      vm.showLoadMapInLeft = MapViewerService.getOption('leftMapViewer', 'showLoadMapInLeft', true);
    }

    // instantiate base controller
    $controller('CRUDController', {
      vm: vm,
      modelService: MapService,
      options: {
        searchOnInit: false,
        perPage: 11
      }
    });

    /**
     * Listen to the view switch event and reload the data
     * from the back-end if the target view is the the form
     */
    $rootScope.$on('switchedView', function (event, data) {
      if (data === 'form') {
        vm.search(vm.paginator.currentPage);
      }
    });

    $rootScope.$on('viewerShown', function (event, viewerId) {
      if (viewerId === 'rightMapViewer') {
        vm.showLoadMapInRight = true;
      } else {
        vm.showLoadMapInLeft = true;
      }
    });

    $rootScope.$on('viewerHidden', function (event, viewerId) {
      if (viewerId === 'rightMapViewer') {
        vm.showLoadMapInRight = false;
      } else {
        vm.showLoadMapInLeft = false;
      }
    });

    // $scope.$on('showOnlyChildMap', function(newVal, oldVal) {
    //   console.log(">>> showOnlyChildMap >>> ", newVal, oldVal)
    //   // vm.search(vm.paginator.currentPage);
    // })
    /**
     * Here we listen to the applyFilters callback to add custom filters
     * 
     * @param {any} defaultQueryFilters 
     * @returns {}
     */
    function applyFilters(defaultQueryFilters) {
      if (angular.isUndefined(vm.queryFilters)) {
        vm.queryFilters = {};
      }
      return angular.extend(defaultQueryFilters, vm.queryFilters);
    }

    /**
     * Make some adjustments in the resources list after loading them
     * 
     * @param {any} response 
     */
    function afterSearch(response) {
      lodash.map(vm.resources, function (map) {
        map.mapImageFile = map.map_image_file;
        map.mapTypeName = map.map_type_name;
        return map;
      });
    }

    /**
    * Open/close the right side nav
    * 
    */
    function toggleBottom() {
      vm.showBottomNav = !vm.showBottomNav;
      if (vm.showBottomNav === true) {
        vm.paginator.currentPage = vm.paginator.currentPage > 0 ? vm.paginator.currentPage : 1;
        vm.search(vm.paginator.currentPage);
      }
    }

    /**
     * Add/remove a map to the working list
     * 
     * @param object resource 
     */
    function toggleIncludeToWorkingList(resource, viewerId) {
      var toggleLoadMap = function toggleLoadMap() {
        if (isLoaded(resource, viewerId)) {
          MapLayerService.removeMapLayer(resource, viewerId);
        } else {
          MapLayerService.addMapLayer(resource, viewerId);
        }
      };
      // Confirm before loading non georeferenced map    
      if (!isLoaded(resource, viewerId) && resource.georeferenced === false) {
        var config = {
          title: $translate.instant('dialog.confirmLoadUngeoreferencedTitle'),
          description: $translate.instant('dialog.LoadUngeoreferencedDescription'),
          yes: $translate.instant('global.yes'),
          no: $translate.instant('global.no')
        };
        C2Dialog.confirm(config).then(function () {
          toggleLoadMap();
          // look for Georef maps which are associated to currenctly nongeoref image
          checkAllGeoRefMaps(resource);
        });
      }
      // Confirm before loading georeferenced map when a non georeferenced map is already loaded   
      else if (MapLayerService.hasNonGeoreferencedLayer(viewerId)) {
          var config = {
            title: $translate.instant('dialog.confirmLoadGeoreferencedTitle'),
            description: $translate.instant('dialog.LoadGeoreferencedDescription'),
            yes: $translate.instant('global.yes'),
            no: $translate.instant('global.no')
          };
          C2Dialog.confirm(config).then(function () {
            MapLayerService.removeAllMapLayers(viewerId);
            toggleLoadMap();
          });
        } else {
          // in the other cases, run directly the toggleLoadMap to remove?/add a map
          toggleLoadMap();
        }
    }

    /**
     * check if a map resource is already loaded
     * 
     * @param object resource 
     */
    function isLoaded(resource, viewerId) {
      var isLoaded = MapLayerService.isAdded(resource, viewerId);
      return isLoaded;
    }

    /**
     * check if current page is Georeference and if the map resource is nongeoreferenced 
     * than only allow the user to load it in left map and georeferenced resource in right map
     * 
     * @param object resource 
     * @returns boolean
     */
    function showLoadMapInLeftButton(resource) {
      if ($state.current.name === "app.georeference") {
        if (resource.georeferenced === false) {
          return true;
        } else {
          return false;
        }
      } else {
        return true;
      }
    }

    /**
     * check if current page is Georeference and if the map resource is nongeoreferenced 
     * than only allow the user to load it in left map and georeferenced resource in right map
     * 
     * @param object resource 
     * @returns boolean
     */
    function showLoadMapInRightButton(resource) {
      if ($state.current.name === "app.georeference") {
        if (resource.georeferenced === true) {
          return true;
        } else {
          return false;
        }
      } else {
        return true;
      }
    }

    /**
     * Called when "Load GCP on Map button is clicked"
     * Triggers a event to Georeference controller to handle
     * 
     * @param object resource
     */
    function loadGcpOnMap(resource) {
      // console.log(">>> map.bottom.nav.controller >>> loadGcpOnMap");
      if (resource.georeferenced) {
        if (resource.gcps) {
          // broadcast to Georeference controller to create markers
          $rootScope.$broadcast("createGcpOnMap", JSON.parse(resource.gcps));
        }
      }
    }

    /**
     * checks if NonGeoreferenced image is loaded in left map
     * 
     * @param object resource 
     * @returns boolean 
     */
    function isNonGeorefLoaded(resource, mapViewer) {
      if (resource.canLoadGcp) {
        return true;
      }
    }

    /**
     * Once a NonGeoreferenced image is loaded, check for all Georeferenced maps to know 
     * which are associated to it. Once we have the list of georef maps, activate their Load GCP button
     * 
     * @param object resource
     */
    function checkAllGeoRefMaps(resource) {
      var fileName = resource.map_image_file.name;
      if (fileName.split('.') !== -1) {
        // let the checkbox be visible for the user to filter
        vm.showFilterCheckbox = true;
        fileName = fileName.split('.').slice(0, -1).join('.');
        // loop through all the resources
        lodash.forEach(vm.resources, function (eachResource) {
          if (eachResource.georeferenced) {
            var tempImageName = eachResource.map_image_file.name;
            tempImageName = tempImageName.split('_rect').slice(0, -1).join('_rect');
            if (tempImageName === fileName) {
              // console.log("eachResources = ", eachResource);
              eachResource.canLoadGcp = true;
              eachResource.isChildOfLoadedNongeoref = true;
            } else {
              eachResource.canLoadGcp = false;
              eachResource.isChildOfLoadedNongeoref = false;
            }
          } else {
            eachResource.isChildOfLoadedNongeoref = false;
          }
        });
      } else {
        console.log("file doesnt have extension");
      }
    }

    function isChildMap(resource) {
      if (angular.isDefined(vm.showOnlyChildMap)) {
        if (vm.showOnlyChildMap) {
          if (resource.isChildOfLoadedNongeoref) {
            return true;
          } else {
            return false;
          }
        } else {
          return true;
        }
      } else {
        return true;
      }
    }

    function showOnlyChildMapFunc() {
      if (vm.showOnlyChildMap) {
        // get currently loaded resource
        var resource = MapLayerService.getViewerOverlays('leftMapViewer');
        // console.log("resource = ", resource);
        // console.log(Object.values(resource)[0].resource.map_source_id);
        var tempMapId = Object.values(resource)[0].resource.map_source_id;
        // create a filter
        vm.queryFilters = { "parent_id": tempMapId };
        // call applyFilter, which will take care of rest
        vm.search(vm.paginator.currentPage);
        afterSearch("response");
      } else {
        vm.queryFilters = null;
        vm.search(vm.paginator.currentPage);
        afterSearch("response");
      }
    }
  }
})();
'use strict';

(function () {

  'use strict';

  MapRightSidenavController.$inject = ["$scope", "$timeout", "$mdSidenav", "$log", "$rootScope", "MapLayerService", "lodash", "$window"];
  angular.module('app').controller('MapRightSidenavController', MapRightSidenavController);

  /** @ngInject */
  // eslint-disable-next-line max-params
  function MapRightSidenavController($scope, $timeout, $mdSidenav, $log, $rootScope, MapLayerService, lodash, $window) {

    var vm = this;
    vm.close = close;
    vm.showMap = showMap;
    vm.hideMap = hideMap;
    vm.removeMap = removeMap;
    vm.applyOpacity = applyOpacity;
    vm.fitMapBounds = fitMapBounds;
    vm.filterMapLayers = filterMapLayers;

    /**
     * Run the initial actions when the controller is activated
     */
    function activate() {
      refreshOverlays();
      vm.sortableConf = { onUpdate: updateAfterSort, handle: '.grab-handle' };
    }

    /**
     * Close the sidenav
     */
    function close() {
      $mdSidenav('right').close().then(function () {
        // you can add some task after closing
      });
    };

    /**
     * Show a map already loaded in the viewer
     * @param {} layer 
     */
    function showMap(layer) {
      MapLayerService.showMap(layer.resource, layer.viewerId);
    }

    /**
     * Hide a map already loaded in the viewer
     * @param {} layer 
     */
    function hideMap(layer) {
      MapLayerService.hideMap(layer.resource, layer.viewerId);
    }

    /**
     * Remove (unload) a map from the viewer
     * @param {} layer 
     */
    function removeMap(layer) {
      MapLayerService.removeMapLayer(layer.resource, layer.viewerId);
    }

    /**
     * Fit the bounds of an already loaded map so the that all the map is visible
     * @param {} layer 
     */
    function fitMapBounds(layer) {
      MapLayerService.fitMapBounds(layer.resource, layer.viewerId);
    }

    /**
     * Apply the opacity defined in the layer.layerParams.opacity property
     * @param {} layer 
     */
    function applyOpacity(layer) {
      MapLayerService.applyOpacity(layer);
    }

    /**
     * Filter the map layers loaded in the viewer by name
     */
    function filterMapLayers() {
      refreshOverlays();
      vm.loadedMapsLayers = lodash.filter(vm.loadedMapsLayers, function (layer) {
        return layer.resource.title.toLowerCase().indexOf(vm.filterMapLayersTxt.toLowerCase()) != -1;
      });
    }

    /**
     * Refresh the maps layers in the sidebar list when the mapLayersChanged event is broadcasted
     */
    $rootScope.$on('mapLayersChanged', function (event) {
      refreshOverlays();
    });

    /**
     * Refresh the overlays in the property loadedMapsLayers getting it from MapLayerService
     * 
     */
    function refreshOverlays() {
      // initially define the overlays as an empty array
      vm.loadedMapsLayers = [];

      // As we want to list all the layers, then get the layers from both viewers
      var rightLayers = MapLayerService.getViewerOverlays('rightMapViewer');
      if (angular.isDefined(rightLayers)) {
        angular.forEach(rightLayers, function (value, key) {
          value.id = key;
          vm.loadedMapsLayers.push(value);
        });
      }

      var leftLayers = MapLayerService.getViewerOverlays('leftMapViewer');
      if (angular.isDefined(leftLayers)) {
        angular.forEach(leftLayers, function (value, key) {
          value.id = key;
          vm.loadedMapsLayers.push(value);
        });
      }
      // The layers must be show in reverse order (last added on the top)
      vm.loadedMapsLayers = vm.loadedMapsLayers.slice().reverse();
    }

    /**
     * Handle the reorder/sort event and apply it to the MapLayerService
     * 
     * @param {any} evt 
     */
    function updateAfterSort(evt) {
      MapLayerService.applyReorder(evt.models);
    }

    activate();
  }
})();
//# sourceMappingURL=data:application/json;base64,
